[{"C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\index.js":"1","C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\App.js":"2","C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\reportWebVitals.js":"3","C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\pages\\index.js":"4","C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\pages\\Main.js":"5","C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\pages\\Guide.js":"6","C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\pages\\CreatePlan.js":"7","C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\pages\\PlaceMain.js":"8","C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\pages\\SearchPlace.js":"9","C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\pages\\ManagePlan.js":"10","C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\components\\UserList.js":"11","C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\components\\UserInsert.js":"12","C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\config.js":"13","C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\components\\index.js":"14","C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\components\\UserItem.js":"15","C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\components\\Header.js":"16","C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\components\\Findmidplace.js":"17","C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\components\\Top3.js":"18","C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\components\\TimeTable.js":"19","C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\components\\Comment.js":"20","C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\components\\Yookha.js":"21","C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\components\\ShareModal.js":"22","C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\components\\Commentitem.js":"23","C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\function\\timeTableFunc.js":"24","C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\function\\getString.js":"25"},{"size":517,"mtime":1609586027013,"results":"26","hashOfConfig":"27"},{"size":209,"mtime":1609586027009,"results":"28","hashOfConfig":"27"},{"size":375,"mtime":1609586027015,"results":"29","hashOfConfig":"27"},{"size":307,"mtime":1611192075062,"results":"30","hashOfConfig":"27"},{"size":711,"mtime":1611368792376,"results":"31","hashOfConfig":"27"},{"size":415,"mtime":1611192075060,"results":"32","hashOfConfig":"27"},{"size":7501,"mtime":1611364665039,"results":"33","hashOfConfig":"27"},{"size":4505,"mtime":1611312916197,"results":"34","hashOfConfig":"27"},{"size":13986,"mtime":1611312677758,"results":"35","hashOfConfig":"27"},{"size":6614,"mtime":1613031071150,"results":"36","hashOfConfig":"27"},{"size":338,"mtime":1611191776833,"results":"37","hashOfConfig":"27"},{"size":9586,"mtime":1611312916194,"results":"38","hashOfConfig":"27"},{"size":125,"mtime":1613031344512,"results":"39","hashOfConfig":"27"},{"size":337,"mtime":1611192075058,"results":"40","hashOfConfig":"27"},{"size":527,"mtime":1611312916195,"results":"41","hashOfConfig":"27"},{"size":541,"mtime":1611312916192,"results":"42","hashOfConfig":"27"},{"size":538,"mtime":1611312916192,"results":"43","hashOfConfig":"27"},{"size":1824,"mtime":1611380935823,"results":"44","hashOfConfig":"27"},{"size":14892,"mtime":1611381604974,"results":"45","hashOfConfig":"27"},{"size":3209,"mtime":1611380935820,"results":"46","hashOfConfig":"27"},{"size":3701,"mtime":1611379773197,"results":"47","hashOfConfig":"27"},{"size":1356,"mtime":1613031071149,"results":"48","hashOfConfig":"27"},{"size":387,"mtime":1611191776830,"results":"49","hashOfConfig":"27"},{"size":4331,"mtime":1611364665037,"results":"50","hashOfConfig":"27"},{"size":1109,"mtime":1611312916196,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1ubwv99",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"54"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"54"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"54"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\index.js",[],["109","110"],"C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\App.js",[],"C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\reportWebVitals.js",[],"C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\pages\\index.js",[],"C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\pages\\Main.js",[],"C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\pages\\Guide.js",["111"],"import React from 'react';\r\nimport { Button } from '@material-ui/core';\r\n\r\nconst Guide = ({ history }) => {\r\n\r\n\tconst goBack = () => {\r\n\t\thistory.goBack();\r\n\t}\r\n\r\n    return (\r\n        <div className=\"guide-con\">\r\n\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={goBack}>Go Back</Button>\r\n            <img className=\"guide-img\" src=\"/img/guide.png\" />\r\n        </div>\r\n    )\r\n}\r\n\r\n    export default Guide;\r\n","C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\pages\\CreatePlan.js",["112","113","114"],"import * as React from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { Grid, Button } from \"@material-ui/core\";\r\nimport { Header } from \"../components\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport \"react-date-range/dist/styles.css\";\r\nimport \"react-date-range/dist/theme/default.css\";\r\nimport { DateRange } from \"react-date-range\";\r\n\r\nexport default class CreatePlan extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      title: \"\",\r\n      start: \"\",\r\n      end: \"\",\r\n      gap: \"\",\r\n      startDate: new Date(),\r\n      endDate: new Date(),\r\n      dates: [],\r\n      key: \"selection\",\r\n    };\r\n  }\r\n\r\n  onRangeChange = (ranges) => {\r\n    //console.log(ranges);\r\n    this.setState({\r\n      startDate: ranges[\"selection\"].startDate,\r\n      endDate: ranges[\"selection\"].endDate,\r\n      key: ranges[\"selection\"].key,\r\n    });\r\n    //getMonth\r\n    let startGetMonth = ranges[\"selection\"].startDate.getMonth();\r\n    startGetMonth =\r\n      startGetMonth < 9 ? \"0\" + (startGetMonth + 1) : startGetMonth + 1;\r\n    let endGetMonth = ranges[\"selection\"].endDate.getMonth();\r\n    endGetMonth = endGetMonth < 9 ? \"0\" + (endGetMonth + 1) : endGetMonth + 1;\r\n    //getDate\r\n    let startGetDate = ranges[\"selection\"].startDate.getDate();\r\n    startGetDate = startGetDate < 10 ? \"0\" + startGetDate : startGetDate;\r\n    let endGetDate = ranges[\"selection\"].endDate.getDate();\r\n    endGetDate = endGetDate < 10 ? \"0\" + endGetDate : endGetDate;\r\n    //getYear\r\n    let startGetYear = ranges[\"selection\"].startDate.getFullYear();\r\n    let s_startGetYear = startGetYear.toString();\r\n    let n_startGetYear = parseInt(s_startGetYear);\r\n    let endGetYear = ranges[\"selection\"].endDate.getFullYear();\r\n    let s_endGetYear = endGetYear.toString();\r\n    let n_endGetYear = parseInt(s_endGetYear);\r\n    this.setState({\r\n      dates: [\r\n        n_startGetYear + \"-\" + startGetMonth + \"-\" + startGetDate,\r\n        n_endGetYear + \"-\" + startGetMonth + \"-\" + endGetDate,\r\n      ],\r\n    });\r\n  };\r\n\r\n  changeHandler = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  submitHandler = (e) => {\r\n    e.preventDefault();\r\n    console.log(this.state);\r\n\r\n    const headers = {\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n      \"Content-Type\": \"application/json\",\r\n    };\r\n\r\n    const datas = {\r\n      title: this.state.title,\r\n      start: this.state.start,\r\n      end: this.state.end,\r\n      gap: this.state.gap,\r\n      dates: this.state.dates,\r\n    };\r\n\r\n    axios\r\n      .post(`https://letsmeeet.azurewebsites.net/api/meet`, datas, headers, {\r\n        withCredentials: true,\r\n      })\r\n      .then(function (response) {\r\n        console.log(response);\r\n        let url = response.data;\r\n        window.location.href = url;\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n        const status = error?.response?.status;\r\n        if (status === undefined) {\r\n          console.dir(\r\n            \"데이터를 불러오던 중 예기치 못한 예외가 발생하였습니다.\\n\" +\r\n              JSON.stringify(error)\r\n          );\r\n        } else if (status === 400) {\r\n          console.dir(\"400에러\");\r\n        } else if (status === 500) {\r\n          console.dir(\"내부 서버 오류입니다. 잠시만 기다려주세요.\");\r\n        }\r\n      });\r\n  };\r\n\r\n  render() {\r\n    const { title, start, end, gap } = this.state;\r\n\r\n    //시간 배열\r\n    const Times = new Array();\r\n    for (let i = 1; i < 12; i++) {\r\n      Times.push(i);\r\n    }\r\n    //수정 전 -> {`\"${amTime}:00\"`}, {`\"${pmTime + 12}:00\"`}\r\n    const amTimeList = Times.map((amTime) => (\r\n      <option value={`${amTime}:00`}>오전{amTime}시</option>\r\n    ));\r\n    const pmTimeList = Times.map((pmTime) => (\r\n      <option value={`${pmTime + 12}:00`}>오후{pmTime}시</option>\r\n    ));\r\n\r\n    return (\r\n      <Grid className=\"create-cont\">\r\n        <Header />\r\n        <Grid className=\"create-cont-title\">\r\n          <h2>언제가 좋을까요?🤔</h2>\r\n        </Grid>\r\n        <Grid className=\"setting\">\r\n          {/* 캘린더 */}\r\n          <DateRange\r\n            className=\"create-calendar\"\r\n            editableDateInputs={true}\r\n            onChange={this.onRangeChange}\r\n            moveRangeOnFirstSelection={false}\r\n            ranges={[this.state]}\r\n          />\r\n          <Grid className=\"create-cont-setting2\">\r\n            {/* 일정이름 */}\r\n            <input\r\n              className=\"create-name\"\r\n              type=\"text\"\r\n              name=\"title\"\r\n              value={title}\r\n              onChange={this.changeHandler}\r\n              placeholder=\"일정 이름을 작성해주세요.\"\r\n            />\r\n            {/* 시간 정하기 */}\r\n            <Grid className=\"create-time\">\r\n              <FormControl className=\"create-time-start\">\r\n                {/* <InputLabel className=\"timeText\">Start Time</InputLabel> */}\r\n                <NativeSelect\r\n                  id=\"start\"\r\n                  name=\"start\"\r\n                  value={start}\r\n                  onChange={this.changeHandler}\r\n                >\r\n                  <option aria-label=\"None\" value=\"\">\r\n                    시작시간\r\n                  </option>\r\n                  {/*수정 전 -> value='\"00:00\"'*/}\r\n                  <option value=\"00:00\">오전0시</option>\r\n                  {amTimeList}\r\n                  <option value=\"12:00\">오후12시</option>\r\n                  {pmTimeList}\r\n                </NativeSelect>\r\n              </FormControl>\r\n              <Grid>~</Grid>\r\n              <FormControl className=\"create-time-finish\">\r\n                {/* <InputLabel className=\"timeText\">Finish Time</InputLabel> */}\r\n                <NativeSelect\r\n                  id=\"end\"\r\n                  name=\"end\"\r\n                  value={end}\r\n                  onChange={this.changeHandler}\r\n                >\r\n                  <option aria-label=\"None\" value=\"\">\r\n                    끝시간\r\n                  </option>\r\n                  <option value=\"00:00\">오전0시</option>\r\n                  {amTimeList}\r\n                  {/*수정 전 -> value='\"12:00\"'*/}\r\n                  <option value=\"12:00\">오후12시</option>\r\n                  {pmTimeList}\r\n                </NativeSelect>\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid className=\"create-gap\">\r\n              <FormControl>\r\n                {/* <InputLabel className=\"timeText\">Interval</InputLabel> */}\r\n                <NativeSelect\r\n                  id=\"gap\"\r\n                  name=\"gap\"\r\n                  value={gap}\r\n                  onChange={this.changeHandler}\r\n                >\r\n                  <option aria-label=\"None\" value=\"\">\r\n                    단위\r\n                  </option>\r\n                  <option value={15}>15분</option>\r\n                  <option value={30}>30분</option>\r\n                  <option value={60}>1시간</option>\r\n                </NativeSelect>\r\n              </FormControl>\r\n              <Grid>&nbsp;&nbsp;단위</Grid>\r\n            </Grid>\r\n            {/* 일정생성 버튼 */}\r\n            <Grid className=\"create-plan\">\r\n              <Button className=\"create-plan-btn\" onClick={this.submitHandler}>\r\n                일정 생성하기\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\pages\\PlaceMain.js",["115","116","117"],"import React, { useState, useRef, useCallback } from \"react\";\r\nimport { Container, Button, Grid } from \"@material-ui/core\";\r\nimport UserList from \"../components/UserList\";\r\nimport UserInsert from \"../components/UserInsert\";\r\nimport PlaceIcon from \"@material-ui/icons/Place\";\r\nimport { Header } from \"../components\";\r\nimport \"../scss/pages/_PlaceMain.scss\";\r\n\r\nconst PlaceMain = ({ history }) => {\r\n  //장소 api에서 title(planName) 받아와야함\r\n  const title = \"비주얼팀\";\r\n  const [users, setUsers] = useState([\r\n    // sample\r\n    // {\r\n    //   id: 1,\r\n    //   name: \"소정\",\r\n    //   address: \"동국대\",\r\n    // },\r\n  ]); // map()을 이용하려면 배열로 적어주기\r\n\r\n  //----------------------user을 UserList에 삽입----------------------\r\n\r\n  const nextId = useRef(1);\r\n  const onInsert = useCallback(\r\n    (name, address, ipCoords) => {\r\n      if (name.length === 0) {\r\n        // 유저이름이 빈칸이라면 \"유저3\", \"유저3의 현재위치\" 식으로 반환\r\n        const userslen = users.length + 1;\r\n        name = `유저${userslen}`;\r\n        if (address.length === 0) {\r\n          // 유저이름이 빈칸이고, 내 위치 반환\r\n          address = `${name}의 현재 위치`;\r\n        }\r\n      } else if (address.length === 0) {\r\n        address = `${name}의 현재 위치`;\r\n      }\r\n      const user = {\r\n        name,\r\n        address,\r\n        id: nextId.current,\r\n        ipCoords, //[경도, 위도]\r\n      };\r\n      setUsers(users.concat(user));\r\n      nextId.current += 1; // nextId 1씩 더하기\r\n    },\r\n    [users]\r\n  );\r\n\r\n  //----------------------가운데 지점 찾기----------------------\r\n\r\n  // 사실은 circumcenter을 사용해야 하지만 일단 centroid을 사용 -> 야매.....\r\n  const searchCenter = () => {\r\n    if (users.length > 1) {\r\n      let longSum = 0;\r\n      let latSum = 0;\r\n      var usersLong = users.map((user) => user.ipCoords[0]); // map은 배열로 저장한다ㅠㅠㅠㅠ\r\n      var usersLat = users.map((user) => user.ipCoords[1]); // 위도를 배열로 저장하기\r\n      for (let i = 0; i < users.length; i++) {\r\n        // 위도, 경도 각각 sum 구하기\r\n        longSum += usersLong[i];\r\n        latSum += usersLat[i];\r\n      }\r\n      let longCenter = longSum / users.length;\r\n      let latCenter = latSum / users.length;\r\n      history.push(`/SearchPlace/${longCenter}/${latCenter}`); //경도, 위도 -> queryString으로 데이터 넘겨주기\r\n    } else {\r\n      alert(\"두 명 이상의 친구가 필요해요!\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Header />\r\n      <Grid className=\"place-main-title\">⏰ {title} 디자인 회의</Grid>\r\n      <Grid className=\"place-mid-title\">중간지점 찾기 📍</Grid>\r\n      <Grid className=\"place-cont\">\r\n        <Grid className=\"place-left-cont\">\r\n          {/* <Grid className=\"place-user-list\"> */}\r\n          {users == \"\" ? (\r\n            <Grid className=\"place-user-none-cont\">\r\n              <Grid className=\"place-user-none\">\r\n                아직 아무도 위치를 등록하지 않았어요.\r\n                <br />\r\n                위치를 등록해주세요!\r\n              </Grid>\r\n            </Grid>\r\n          ) : (\r\n            <UserList users={users} />\r\n          )}\r\n          {/* </Grid> */}\r\n        </Grid>\r\n        <Grid className=\"place-right-cont\">\r\n          <Grid className=\"place-my-place\">\r\n            <img className=\"place-img-my\" src=\"/img/myPlace.jpg\" />\r\n            <UserInsert users={users} onInsert={onInsert} />\r\n            <Grid className=\"place-my-title\">\r\n              출발 할 현재 내 위치를 등록하고,\r\n              <br />\r\n              서로의 위치를 공유하면서\r\n              <br />\r\n              약속 장소를 정해보세요.\r\n            </Grid>\r\n          </Grid>\r\n          <Grid className=\"place-our-mid\">\r\n            <img className=\"place-img-mid\" src=\"/img/middlePlace.png\" />\r\n            <Button variant=\"contained\" color=\"primary\" onClick={searchCenter}>\r\n              <PlaceIcon></PlaceIcon>중간지점 보기\r\n            </Button>\r\n            <Grid className=\"place-our-title\">\r\n              각자 입력하신 위치를 기반으로 하여,\r\n              <br />\r\n              최적의 약속 장소를 정하기 위한\r\n              <br />\r\n              중간 지점을 알려드려요.\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PlaceMain;\r\n","C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\pages\\SearchPlace.js",["118","119"],"import React, { useEffect } from \"react\";\r\nimport queryString from \"query-string\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport \"../scss/pages/_SearchPlace.scss\";\r\nimport { Header } from \"../components\";\r\n\r\nconst { kakao } = window;\r\n\r\nconst SearchPlace = ({ location, match }) => {\r\n  const query = queryString.parse(location.search);\r\n  console.log(query);\r\n\r\n  //---------------------지도 생성하기---------------------\r\n\r\n  useEffect(() => {\r\n    mapScript();\r\n  }, []);\r\n\r\n  const mapScript = () => {\r\n    let container = document.getElementById(\"map\");\r\n    let options = {\r\n      center: new kakao.maps.LatLng(\r\n        match.params.latCenter,\r\n        match.params.longCenter\r\n      ),\r\n      level: 7,\r\n    };\r\n\r\n    //---------------------공통 코드---------------------\r\n\r\n    const map = new kakao.maps.Map(container, options);\r\n\r\n    //---------------------공통 코드---------------------\r\n\r\n    //---------------------우리가 만날 위치 텍스트로 표시---------------------\r\n\r\n    var iwContent = '<div style=\"padding:5px;\">우리가 만날 위치!</div>', // 인포윈도우에 표출될 내용으로 HTML 문자열이나 document element가 가능합니다\r\n      iwPosition = new kakao.maps.LatLng(\r\n        match.params.latCenter,\r\n        match.params.longCenter\r\n      ), //인포윈도우 표시 위치입니다\r\n      iwRemoveable = true; // removeable 속성을 ture 로 설정하면 인포윈도우를 닫을 수 있는 x버튼이 표시됩니다\r\n\r\n    // 인포윈도우를 생성하고 지도에 표시합니다\r\n    var infowindow = new kakao.maps.InfoWindow({\r\n      map: map, // 인포윈도우가 표시될 지도\r\n      position: iwPosition,\r\n      content: iwContent,\r\n      removable: iwRemoveable,\r\n    });\r\n\r\n    //---------------------지도 클릭하면 주소 마커 표시---------------------\r\n\r\n    // 주소-좌표 변환 객체를 생성합니다\r\n    var geocoder = new kakao.maps.services.Geocoder();\r\n\r\n    var marker = new kakao.maps.Marker(), // 클릭한 위치를 표시할 마커입니다\r\n      infowindow = new kakao.maps.InfoWindow({ zindex: 1 }); // 클릭한 위치에 대한 주소를 표시할 인포윈도우입니다\r\n\r\n    // 현재 지도 중심좌표로 주소를 검색해서 지도 좌측 상단에 표시합니다\r\n    searchAddrFromCoords(map.getCenter(), displayCenterInfo);\r\n\r\n    // 지도를 클릭했을 때 클릭 위치 좌표에 대한 주소정보를 표시하도록 이벤트를 등록합니다\r\n    kakao.maps.event.addListener(map, \"click\", function (mouseEvent) {\r\n      searchDetailAddrFromCoords(mouseEvent.latLng, function (result, status) {\r\n        if (status === kakao.maps.services.Status.OK) {\r\n          var detailAddr = !!result[0].road_address\r\n            ? \"<div>도로명주소 : \" +\r\n              result[0].road_address.address_name +\r\n              \"</div>\"\r\n            : \"\";\r\n          detailAddr +=\r\n            \"<div>지번 주소 : \" + result[0].address.address_name + \"</div>\";\r\n\r\n          var content =\r\n            '<div class=\"bAddr\">' +\r\n            '<span class=\"address-popup-title\">법정동 주소정보</span>' +\r\n            detailAddr +\r\n            \"</div>\";\r\n\r\n          // 마커를 클릭한 위치에 표시합니다\r\n          marker.setPosition(mouseEvent.latLng);\r\n          marker.setMap(map);\r\n\r\n          // 인포윈도우에 클릭한 위치에 대한 법정동 상세 주소정보를 표시합니다\r\n          infowindow.setContent(content);\r\n          infowindow.open(map, marker);\r\n        }\r\n      });\r\n    });\r\n    // 중심 좌표나 확대 수준이 변경됐을 때 지도 중심 좌표에 대한 주소 정보를 표시하도록 이벤트를 등록합니다\r\n    kakao.maps.event.addListener(map, \"idle\", function () {\r\n      searchAddrFromCoords(map.getCenter(), displayCenterInfo);\r\n    });\r\n\r\n    function searchAddrFromCoords(coords, callback) {\r\n      // 좌표로 행정동 주소 정보를 요청합니다\r\n      geocoder.coord2RegionCode(coords.getLng(), coords.getLat(), callback);\r\n    }\r\n\r\n    function searchDetailAddrFromCoords(coords, callback) {\r\n      // 좌표로 법정동 상세 주소 정보를 요청합니다\r\n      geocoder.coord2Address(coords.getLng(), coords.getLat(), callback);\r\n    }\r\n\r\n    // 지도 좌측상단에 지도 중심좌표에 대한 주소정보를 표출하는 함수입니다\r\n    function displayCenterInfo(result, status) {\r\n      if (status === kakao.maps.services.Status.OK) {\r\n        var infoDiv = document.getElementById(\"centerAddr\");\r\n\r\n        for (var i = 0; i < result.length; i++) {\r\n          // 행정동의 region_type 값은 'H' 이므로\r\n          if (result[i].region_type === \"H\") {\r\n            infoDiv.innerHTML = result[i].address_name;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    //---------------------카테고리 별로 지도에 나타내기\r\n    // 마커를 클릭했을 때 해당 장소의 상세정보를 보여줄 커스텀오버레이입니다\r\n    var placeOverlay = new kakao.maps.CustomOverlay({ zIndex: 1 }),\r\n      contentNode = document.createElement(\"div\"), // 커스텀 오버레이의 컨텐츠 엘리먼트 입니다\r\n      markers = [], // 마커를 담을 배열입니다\r\n      currCategory = \"\"; // 현재 선택된 카테고리를 가지고 있을 변수입니다\r\n\r\n    // 장소 검색 객체를 생성합니다\r\n    var ps = new kakao.maps.services.Places(map);\r\n\r\n    // 지도에 idle 이벤트를 등록합니다\r\n    kakao.maps.event.addListener(map, \"idle\", searchPlaces);\r\n\r\n    // 커스텀 오버레이의 컨텐츠 노드에 css class를 추가합니다\r\n    contentNode.className = \"placeinfo_wrap\";\r\n\r\n    // 커스텀 오버레이의 컨텐츠 노드에 mousedown, touchstart 이벤트가 발생했을때\r\n    // 지도 객체에 이벤트가 전달되지 않도록 이벤트 핸들러로 kakao.maps.event.preventMap 메소드를 등록합니다\r\n    addEventHandle(contentNode, \"mousedown\", kakao.maps.event.preventMap);\r\n    addEventHandle(contentNode, \"touchstart\", kakao.maps.event.preventMap);\r\n\r\n    // 커스텀 오버레이 컨텐츠를 설정합니다\r\n    placeOverlay.setContent(contentNode);\r\n\r\n    // 각 카테고리에 클릭 이벤트를 등록합니다\r\n    addCategoryClickEvent();\r\n\r\n    // 엘리먼트에 이벤트 핸들러를 등록하는 함수입니다\r\n    function addEventHandle(target, type, callback) {\r\n      if (target.addEventListener) {\r\n        target.addEventListener(type, callback);\r\n      } else {\r\n        target.attachEvent(\"on\" + type, callback);\r\n      }\r\n    }\r\n\r\n    // 카테고리 검색을 요청하는 함수입니다\r\n    function searchPlaces() {\r\n      if (!currCategory) {\r\n        return;\r\n      }\r\n\r\n      // 커스텀 오버레이를 숨깁니다\r\n      placeOverlay.setMap(null);\r\n\r\n      // 지도에 표시되고 있는 마커를 제거합니다\r\n      removeMarker();\r\n\r\n      ps.categorySearch(currCategory, placesSearchCB, { useMapBounds: true });\r\n    }\r\n\r\n    // 장소검색이 완료됐을 때 호출되는 콜백함수 입니다\r\n    function placesSearchCB(data, status, pagination) {\r\n      if (status === kakao.maps.services.Status.OK) {\r\n        // 정상적으로 검색이 완료됐으면 지도에 마커를 표출합니다\r\n        displayPlaces(data);\r\n      } else if (status === kakao.maps.services.Status.ZERO_RESULT) {\r\n        // 검색결과가 없는경우 해야할 처리가 있다면 이곳에 작성해 주세요\r\n      } else if (status === kakao.maps.services.Status.ERROR) {\r\n        // 에러로 인해 검색결과가 나오지 않은 경우 해야할 처리가 있다면 이곳에 작성해 주세요\r\n      }\r\n    }\r\n\r\n    // 지도에 마커를 표출하는 함수입니다\r\n    function displayPlaces(places) {\r\n      // 몇번째 카테고리가 선택되어 있는지 얻어옵니다\r\n      // 이 순서는 스프라이트 이미지에서의 위치를 계산하는데 사용됩니다\r\n      var order = document\r\n        .getElementById(currCategory)\r\n        .getAttribute(\"data-order\");\r\n\r\n      for (var i = 0; i < places.length; i++) {\r\n        // 마커를 생성하고 지도에 표시합니다\r\n        var marker = addMarker(\r\n          new kakao.maps.LatLng(places[i].y, places[i].x),\r\n          order\r\n        );\r\n\r\n        // 마커와 검색결과 항목을 클릭 했을 때\r\n        // 장소정보를 표출하도록 클릭 이벤트를 등록합니다\r\n        (function (marker, place) {\r\n          kakao.maps.event.addListener(marker, \"click\", function () {\r\n            displayPlaceInfo(place);\r\n          });\r\n        })(marker, places[i]);\r\n      }\r\n    }\r\n\r\n    // 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다\r\n    function addMarker(position, order) {\r\n      var imageSrc =\r\n          \"https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/places_category.png\", // 마커 이미지 url, 스프라이트 이미지를 씁니다\r\n        imageSize = new kakao.maps.Size(27, 28), // 마커 이미지의 크기\r\n        imgOptions = {\r\n          spriteSize: new kakao.maps.Size(72, 208), // 스프라이트 이미지의 크기\r\n          spriteOrigin: new kakao.maps.Point(46, order * 36), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\r\n          offset: new kakao.maps.Point(11, 28), // 마커 좌표에 일치시킬 이미지 내에서의 좌표\r\n        },\r\n        markerImage = new kakao.maps.MarkerImage(\r\n          imageSrc,\r\n          imageSize,\r\n          imgOptions\r\n        ),\r\n        marker = new kakao.maps.Marker({\r\n          position: position, // 마커의 위치\r\n          image: markerImage,\r\n        });\r\n\r\n      marker.setMap(map); // 지도 위에 마커를 표출합니다\r\n      markers.push(marker); // 배열에 생성된 마커를 추가합니다\r\n\r\n      return marker;\r\n    }\r\n\r\n    // 지도 위에 표시되고 있는 마커를 모두 제거합니다\r\n    function removeMarker() {\r\n      for (var i = 0; i < markers.length; i++) {\r\n        markers[i].setMap(null);\r\n      }\r\n      markers = [];\r\n    }\r\n\r\n    // 클릭한 마커에 대한 장소 상세정보를 커스텀 오버레이로 표시하는 함수입니다\r\n    function displayPlaceInfo(place) {\r\n      var content =\r\n        '<div class=\"placeinfo\">' +\r\n        '   <a class=\"title\" href=\"' +\r\n        place.place_url +\r\n        '\" target=\"_blank\" title=\"' +\r\n        place.place_name +\r\n        '\">' +\r\n        place.place_name +\r\n        \"</a>\";\r\n\r\n      if (place.road_address_name) {\r\n        content +=\r\n          '    <span title=\"' +\r\n          place.road_address_name +\r\n          '\">' +\r\n          place.road_address_name +\r\n          \"</span>\" +\r\n          '  <span class=\"jibun\" title=\"' +\r\n          place.address_name +\r\n          '\">(지번 : ' +\r\n          place.address_name +\r\n          \")</span>\";\r\n      } else {\r\n        content +=\r\n          '    <span title=\"' +\r\n          place.address_name +\r\n          '\">' +\r\n          place.address_name +\r\n          \"</span>\";\r\n      }\r\n\r\n      content +=\r\n        '    <span class=\"tel\">' +\r\n        place.phone +\r\n        \"</span>\" +\r\n        \"</div>\" +\r\n        '<div class=\"after\"></div>';\r\n\r\n      contentNode.innerHTML = content;\r\n      placeOverlay.setPosition(new kakao.maps.LatLng(place.y, place.x));\r\n      placeOverlay.setMap(map);\r\n    }\r\n\r\n    // 각 카테고리에 클릭 이벤트를 등록합니다\r\n    function addCategoryClickEvent() {\r\n      var category = document.getElementById(\"category\"),\r\n        children = category.children;\r\n\r\n      for (var i = 0; i < children.length; i++) {\r\n        children[i].onclick = onClickCategory;\r\n      }\r\n    }\r\n\r\n    // 카테고리를 클릭했을 때 호출되는 함수입니다\r\n    function onClickCategory() {\r\n      var id = this.id,\r\n        className = this.className;\r\n\r\n      placeOverlay.setMap(null);\r\n\r\n      if (className === \"on\") {\r\n        currCategory = \"\";\r\n        changeCategoryClass();\r\n        removeMarker();\r\n      } else {\r\n        currCategory = id;\r\n        changeCategoryClass(this);\r\n        searchPlaces();\r\n      }\r\n    }\r\n\r\n    // 클릭된 카테고리에만 클릭된 스타일을 적용하는 함수입니다\r\n    function changeCategoryClass(el) {\r\n      var category = document.getElementById(\"category\"),\r\n        children = category.children,\r\n        i;\r\n\r\n      for (i = 0; i < children.length; i++) {\r\n        children[i].className = \"\";\r\n      }\r\n\r\n      if (el) {\r\n        el.className = \"on\";\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Header/>\r\n      <Grid className=\"map-title\">우리 어디서 만날까? 바로 여기!📍</Grid>\r\n      {/* <Grid>\r\n        위도는 {match.params.latCenter}, 경도는 {match.params.longCenter}\r\n      </Grid> */}\r\n      <Grid className=\"map_wrap\">\r\n        <Grid id=\"map\">map here!</Grid> {/* 지도 오는 곳 */}\r\n        <Grid className=\"hAddr\">\r\n          <Grid className=\"address-title\">지도중심기준 행정동 주소정보</Grid>\r\n          <Grid id=\"centerAddr\"></Grid>\r\n        </Grid>\r\n        <ul id=\"category\">\r\n          <li id=\"FD6\" data-order=\"0\">\r\n            <span class=\"category_bg bank\"></span>\r\n            음식점\r\n          </li>\r\n          <li id=\"CT1\" data-order=\"1\">\r\n            <span class=\"category_bg mart\"></span>\r\n            문화시설\r\n          </li>\r\n          <li id=\"PM9\" data-order=\"2\">\r\n            <span class=\"category_bg pharmacy\"></span>\r\n            약국\r\n          </li>\r\n          <li id=\"SW8\" data-order=\"3\">\r\n            <span class=\"category_bg oil\"></span>\r\n            지하철\r\n          </li>\r\n          <li id=\"CE7\" data-order=\"4\">\r\n            <span class=\"category_bg cafe\"></span>\r\n            카페\r\n          </li>\r\n          <li id=\"CS2\" data-order=\"5\">\r\n            <span class=\"category_bg store\"></span>\r\n            편의점\r\n          </li>\r\n        </ul>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchPlace;\r\n","C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\pages\\ManagePlan.js",["120","121","122"],"import React, { useState, useEffect } from \"react\";\r\nimport html2canvas from 'html2canvas';\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\r\nimport { CLIENT_ID } from '../config';\r\nimport axios from 'axios';\r\n\r\n\r\nimport { Header, TimeTable, Comment, Yookha, Top3, ShareModal, Findmidplace } from \"../components\";\r\n\r\nimport { Grid, Button } from '@material-ui/core';\r\nimport AccessAlarmIcon from '@material-ui/icons/AccessAlarm';\r\n\r\nconst ManagePlan = ({ match }) => {\r\n\tconst [data, setData] = useState();\r\n\tconst [shareImg, setShareImg] = useState(\"\");\r\n\tconst [open, setOpen] = useState(false);\r\n\tconst [checkUser, setCheckUser] = useState();\r\n\tconst [checkGroup, setCheckGroup] = useState();\r\n\tconst [user, setUser] = useState();\r\n\tconst [update, forceUpdate] = useState(true);\r\n\t\r\n\tconst [isloggedin, setloggedin] = useState(false);\r\n\tconst [logininput, setlogininput] = useState({\r\n\t\tid: '',\r\n\t\tpw: '',\r\n\t});\r\n\tconst { id, pw } = logininput;\r\n\tconst onChange = (e) => {\r\n\t\tconst { value, name } = e.target;\r\n\t\tsetlogininput({\r\n\t\t\t...logininput,\r\n\t\t\t[name]: value\r\n\t\t});\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tif(!match.url)\r\n\t\t\treturn;\r\n\t\tgetData(match.url.substr(1));\r\n\t}, [match.url]);\r\n\tconst [senddata, setsenddata] = useState([]);\r\n\tconst getData = async (url) => {\r\n\t\tawait axios.get(`https://letsmeeet.azurewebsites.net/api/meet/info?id=${url}`)\r\n\t\t.then((res) => {\r\n\t\t\tsetData(res.data);\r\n\t\t\tsetUser(res.data.users);\r\n\t\t\tsetCheckGroup(res.data.checkArray);\r\n\t\t\tsetsenddata(res.data.meetSubInfo);\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconst status = err?.response?.status;\r\n\t\t\tconsole.log(err);\r\n\t\t\tif (status === undefined) {\r\n\t\t\t\tconsole.dir(\"데이터를 불러오던 중 예기치 못한 예외가 발생하였습니다.\\n\" + JSON.stringify(err));\r\n\t\t\t}\r\n\t\t\telse if (status === 400) {\r\n\t\t\t\tconsole.dir(\"400에러\");\r\n\t\t\t}\r\n\t\t\telse if (status === 404) {\r\n\t\t\t\tconsole.dir(\"404에러\");\r\n\t\t\t}\r\n\t\t\telse if (status === 500) {\r\n\t\t\t\tconsole.dir(\"내부 서버 오류입니다. 잠시만 기다려주세요.\");\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\tconst onLogin = (e) => {\r\n\t\tif (id === '' || pw === '') {\r\n\t\t\talert('닉네임과 패스워드를 입력해주세요');\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconst data = {\r\n\t\t\t\t\"userId\": logininput.id,\r\n\t\t\t\t\"userPass\": logininput.pw,\r\n\t\t\t\t\"meetId\": match.url.substr(1)\r\n\t\t\t}\r\n\t\t\taxios.post(`https://letsmeeet.azurewebsites.net/api/user/signin`, data)\r\n\t\t\t\t.then( async (res) => {\r\n\t\t\t\t\tconsole.log(res.data);\r\n\t\t\t\t\tsetloggedin(true);\r\n\t\t\t\t\tsetData(res.data);\r\n\t\t\t\t\tsetCheckUser(res.data.userTime);\r\n\t\t\t\t\tsetCheckGroup(res.data.checkArray);\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err) => {\r\n\t\t\t\t\tconst status = err?.response?.status;\r\n\t\t\t\t\tconsole.log(err);\r\n\t\t\t\t\tif (status === undefined) {\r\n\t\t\t\t\t\tconsole.dir(\"데이터를 불러오던 중 예기치 못한 예외가 발생하였습니다.\\n\" + JSON.stringify(err));\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (status === 400) {\r\n\t\t\t\t\t\talert(\"\");\r\n\t\t\t\t\t\tconsole.dir(\"400에러\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (status === 401) {\r\n\t\t\t\t\t\talert(\"아이디, 비밀번호를 확인해주세요.\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (status === 404) {\r\n\t\t\t\t\t\talert(\"404\");\r\n\t\t\t\t\t\tconsole.dir(\"404에러\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (status === 500) {\r\n\t\t\t\t\t\tconsole.dir(\"내부 서버 오류입니다. 잠시만 기다려주세요.\");\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t}\r\n\t};\r\n\r\n\tconst copyDOM = async () => {\r\n\t\twindow.scrollTo(0, 0);\r\n\r\n\t\tlet url = \"\";\r\n\t\tawait html2canvas(document.getElementById(\"teamtable\")).then(async (canvas) => {\r\n\t\t\turl = await canvas.toDataURL(\"image/jpg\").split(',')[1];\r\n\t\t\tsetOpen(true);\r\n\t\t});\r\n\r\n\t\tawait uploadImgur(url);\r\n\t}\r\n\r\n\tconst copyURL = () => {\r\n\t\t\r\n\t}\r\n\r\n\tconst uploadImgur = (url) => {\r\n\t\tconst apiBase = 'https://api.imgur.com/3/image';\r\n\t\taxios.post(apiBase, {\r\n\t\t\timage: url,\r\n\t\t\ttype: 'base64'\r\n\t\t}, {\r\n\t\t\theaders: {\r\n\t\t\t\tAuthorization: 'Client-ID ' + CLIENT_ID\r\n\t\t\t}\r\n\t\t})\r\n\t\t\t.then(res => {\r\n\t\t\t\tsetShareImg(res.data.data.link);\r\n\t\t\t})\r\n\t\t\t.catch(e => {\r\n\t\t\t\tconsole.log(e);\r\n\t\t\t})\r\n\t}\r\n\r\n\tconst handleClose = () => {\r\n\t\tsetOpen(false);\r\n\t\tsetShareImg(\"\");\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Grid container direction=\"column\" className=\"Manage-page-con\">\r\n\t\t\t<Header />\r\n\t\t\t{isloggedin && data &&\r\n\t\t\t\t<Grid className=\"Manage-plan-title\">\r\n\t\t\t\t\t<img className=\"img\" src=\"/img/alarm.png\" />\r\n\t\t\t\t\t<h2>{data.title}</h2>\r\n\t\t\t\t</Grid>\r\n\t\t\t}\r\n\t\t\t{data ?\r\n\t\t\t\t<Grid container direction=\"row\" className=\"Manage-contents-con\">\r\n\t\t\t\t\t{isloggedin ? \r\n\t\t\t\t\t<TimeTable\r\n\t\t\t\t\t\tdata={data}\r\n\t\t\t\t\t\ttype=\"mine\"\r\n\t\t\t\t\t\tuser={user}\r\n\t\t\t\t\t\tcheckUser = {checkUser}\r\n\t\t\t\t\t\tsetCheckGroup={setCheckGroup}\r\n\t\t\t\t\t\tupdate={update}\r\n\t\t\t\t\t\tforceUpdate={forceUpdate}\r\n\t\t\t\t\t/> : <Grid container direction=\"row\" justify=\"center\" className=\"login-con\">\r\n\t\t\t\t\t\t\t<div className=\"login-flex-container\">\r\n\t\t\t\t\t\t\t\t<div className=\"title\">\r\n\t\t\t\t\t\t\t\t\t<img className=\"img\" src=\"/img/alarm.png\" />\r\n\t\t\t\t\t\t\t\t\t<p>{data.title}</p>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"form-con\">\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t<text className=\"nickname\">닉네임 : </text>\r\n\t\t\t\t\t\t\t\t\t\t<input className=\"logininput\" name=\"id\" onChange={onChange} value={id} />\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t<text className=\"nickname\">비밀번호 : </text>\r\n\t\t\t\t\t\t\t\t\t\t<input className=\"logininput\" name=\"pw\" type=\"password\" onChange={onChange} value={pw} />\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"extra-con\">\r\n\t\t\t\t\t\t\t\t\t<text className=\"notice\">*닉네임과 비밀번호는 현재 일정에만 사용됩니다.</text>\r\n\t\t\t\t\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={onLogin}>로그인</Button>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</Grid>}\r\n\t\t\t\t\t{ \r\n\t\t\t\t\t\tuser && \r\n\t\t\t\t\t\t<TimeTable\r\n\t\t\t\t\t\t\tdata={data}\r\n\t\t\t\t\t\t\ttype=\"team\"\r\n\t\t\t\t\t\t\tuser={user}\r\n\t\t\t\t\t\t\tcheckGroup={checkGroup}\r\n\t\t\t\t\t\t\tupdate={update}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t}\r\n\t\t\t\t\t<Grid container className=\"yook-ha-con\" direction=\"column\" justify=\"flex-start\" alignItems=\"stretch\">\r\n\t\t\t\t\t\t<Top3 isloggedin={isloggedin}></Top3>\r\n\t\t\t\t\t\t<Yookha senddata={senddata}></Yookha>\r\n\t\t\t\t\t\t<Findmidplace></Findmidplace>\r\n\t\t\t\t\t\t<Comment isloggedin={isloggedin}></Comment>\r\n\t\t\t\t\t\t<Grid className=\"btn-con\">\r\n\t\t\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={copyDOM}>카카오톡 공유하기</Button>\r\n\t\t\t\t\t\t\t<CopyToClipboard text={window.location.href} onCopy={() => window.alert(\"링크가 복사되었습니다.\")}>\r\n\t\t\t\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={copyURL}>링크 복사하기</Button>\r\n\t\t\t\t\t\t\t</CopyToClipboard>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<ShareModal\r\n\t\t\t\t\t\tshareImg={shareImg}\r\n\t\t\t\t\t\topen={open}\r\n\t\t\t\t\t\thandleClose={handleClose}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Grid>\r\n\t\t\t\t: \"로딩중입니다.\"\r\n\t\t\t}\r\n\t\t</Grid>\r\n\t);\r\n};\r\n\r\nexport default ManagePlan;","C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\components\\UserList.js",[],"C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\components\\UserInsert.js",["123","124","125","126","127"],"import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Typography,\r\n  Grid,\r\n  InputBase,\r\n  IconButton,\r\n  Dialog,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport \"../scss/components/_UserInsert.scss\";\r\n\r\nconst { kakao } = window;\r\n\r\nconst UserInsert = ({ onInsert, users }) => {\r\n  const [dialogOpen, setdialogOpen] = useState(false);\r\n  const [name, setName] = useState(\"\");\r\n  const [results, setResults] = useState([]);\r\n  const [address, setAddress] = useState([]);\r\n  const [hidden, setHidden] = useState(false);\r\n\r\n  // 장소 추가 버튼 누르면 Dialog open\r\n  const handleClickOpen = () => {\r\n    setdialogOpen(true);\r\n    setHidden(false);\r\n  };\r\n\r\n  // Dialog close\r\n  const handleClose = () => {\r\n    setdialogOpen(false);\r\n    setResults([]);\r\n  };\r\n\r\n  // textfield 이름 변경\r\n  const handleNameChange = (e) => {\r\n    setName(e.target.value);\r\n  };\r\n\r\n  //----------------------내 위치 받아오기----------------------\r\n\r\n  const handleMyPosition = () => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition((position) => {\r\n        const longitude = position.coords.longitude; // 경도\r\n        const latitude = position.coords.latitude; // 위도\r\n        const positionArray = [longitude, latitude]; //경도,위도\r\n        // var locPosition = new kakao.maps.LatLng(latitude, longitude); // 좌표값으로 변환 -> 객체이다\r\n        // console.log(Object.entries(locPosition));\r\n        // console.log(locPosition.La);\r\n        // const positionArray = Object.entries(locPosition); // 배열로 변환\r\n        const addList = {\r\n          name,\r\n          positionArray,\r\n        };\r\n        console.log(positionArray);\r\n        onInsert(name, \"\", positionArray);\r\n        setdialogOpen(false);\r\n        setName(\"\");\r\n      });\r\n    } else {\r\n      alert(\"Geolocation is not supported by your browser\");\r\n    }\r\n  };\r\n\r\n  //----------------------검색하기 위한 함수----------------------\r\n\r\n  const handleSubmit = (e) => {\r\n    // 장소 검색 객체를 생성합니다\r\n    var ps = new kakao.maps.services.Places();\r\n\r\n    // 키워드로 장소를 검색합니다\r\n    searchPlaces();\r\n\r\n    // 키워드 검색을 요청하는 함수입니다\r\n    function searchPlaces() {\r\n      var keyword = document.getElementById(\"input-address\").value;\r\n\r\n      if (!keyword.replace(/^\\s+|\\s+$/g, \"\")) {\r\n        alert(\"키워드를 입력해주세요!\");\r\n        return false;\r\n      }\r\n\r\n      // 장소검색 객체를 통해 키워드로 장소검색을 요청합니다\r\n      ps.keywordSearch(keyword, placesSearchCB);\r\n    }\r\n\r\n    // 장소검색이 완료됐을 때 호출되는 콜백함수 입니다\r\n    function placesSearchCB(data, status, pagination) {\r\n      if (status === kakao.maps.services.Status.OK) {\r\n        // 정상적으로 검색 완료\r\n        getListItem(data); // List로 나타내기\r\n        setHidden(true);\r\n      } else if (status === kakao.maps.services.Status.ZERO_RESULT) {\r\n        alert(\"검색 결과가 존재하지 않습니다.\");\r\n        return;\r\n      } else if (status === kakao.maps.services.Status.ERROR) {\r\n        alert(\"검색 결과 중 오류가 발생했습니다.\");\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n  //----------------------검색 결과 주소들을 결과로 반환 -> List로 나타내기 위함----------------------\r\n\r\n  let datas = [];\r\n  const getListItem = (places) => {\r\n    // console.log(places);\r\n    datas = places;\r\n    setResults(datas);\r\n  };\r\n\r\n  //----------------------유저 이름과 검색한 주소를 UserList에 삽입하기----------------------\r\n\r\n  const handleAddressChange = (address, e) => {\r\n    setAddress(address);\r\n\r\n    // 주소-좌표 변환 객체를 생성합니다\r\n    var geocoder = new kakao.maps.services.Geocoder();\r\n\r\n    // 주소로 좌표를 검색합니다\r\n    geocoder.addressSearch(address.address_name, function (result, status) {\r\n      const coordsArray = [parseFloat(address.x), parseFloat(address.y)]; // 경도, 위도\r\n      // 정상적으로 검색이 완료됐으면\r\n      // if (status === kakao.maps.services.Status.OK) {\r\n      //   var coords = new kakao.maps.LatLng(result[0].y, result[0].x); // 객체이다. 배열로 변환해주자.\r\n      // } else {\r\n      //   alert(\"주소를 정확히 입력해 주세요!\");\r\n      // }\r\n      // const coordsArray = Object.entries(coords); // 배열로 변환\r\n      // console.log(coordsArray);\r\n      onInsert(name, address.place_name, coordsArray);\r\n    });\r\n    setdialogOpen(false);\r\n    setName(\"\");\r\n    setAddress(\"\");\r\n    setResults([]);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n        내 위치 등록하기\r\n      </Button>\r\n      <Dialog\r\n        className=\"info-dialog\"\r\n        onClose={handleClose}\r\n        aria-labelledby=\"customized-dialog-title\"\r\n        maxWidth=\"false\"\r\n        open={dialogOpen}\r\n      >\r\n        <Grid onSubmit={handleSubmit}>\r\n          <Grid className=\"user-info\">\r\n            {/* <Typography variant=\"outlined\">이름</Typography> */}\r\n            <Grid className=\"name-myspot\">\r\n              <TextField\r\n                id=\"outlined-dense\"\r\n                label=\"나의 이름\"\r\n                value={name}\r\n                onChange={handleNameChange}\r\n                margin=\"dense\"\r\n                variant=\"outlined\"\r\n              />\r\n              {/*<IconButton aria-label=\"Directions\" onClick={handleMyPosition}>\r\n                <Typography\r\n                  className=\"getMySpot\"\r\n                  variant=\"body2\"\r\n                  color=\"primary\"\r\n                >\r\n                  내 위치<br></br>받아오기\r\n                </Typography>\r\n              </IconButton>*/}\r\n              <Button\r\n                className=\"myPlace\"\r\n                variant=\"outlined\"\r\n                onClick={handleMyPosition}\r\n              >\r\n                내 위치<br/>받아오기\r\n              </Button>\r\n            </Grid>\r\n            <Grid className=\"address-inputBtn\">\r\n              <TextField\r\n                id=\"input-address\"\r\n                // placeholder=\"어디서 출발할거야?\"\r\n                onKeyPress={(event) => {\r\n                  if (event.key === \"Enter\") {\r\n                    handleSubmit();\r\n                  }\r\n                }}\r\n                margin=\"dense\"\r\n                variant=\"outlined\"\r\n                label=\"어디서 출발하나요?\"\r\n              />\r\n              <Button\r\n                className=\"searchPlace\"\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                onClick={handleSubmit}\r\n              >\r\n                장소검색\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid className={`doro-jibun-info ${hidden ? \"hidden\" : \"\"}`}>\r\n            <Grid className=\"address-tip-info\">\r\n              <hr className=\"address-hr\"/>\r\n              <Grid className=\"address-tip\">tip</Grid>\r\n              <Grid className=\"address-info\">\r\n                아래와 같은 조합으로 겁색을 하시면 더욱 정확한 결과가\r\n                검색됩니다.\r\n              </Grid>\r\n            </Grid>\r\n            <Grid className=\"address-group-ex\">\r\n              <Grid className=\"address-ex\">\r\n                <Grid className=\"address-ex-title\">도로명+건물번호</Grid>\r\n                <Grid className=\"real-address\">\r\n                  (예) 판교역로 235, 제주 첨단로 242\r\n                </Grid>\r\n              </Grid>\r\n              <Grid className=\"address-ex\">\r\n                <Grid className=\"address-ex-title\">지역명(동/리) + 번지</Grid>\r\n                <Grid className=\"real-address\">\r\n                  (예) 삼평동 681, 제주 영평동 2181\r\n                </Grid>\r\n              </Grid>\r\n              <Grid className=\"address-ex\">\r\n                <Grid className=\"address-ex-title\">\r\n                  지역명(동/리) + 건물명(아파트명)\r\n                </Grid>\r\n                <Grid className=\"real-address\">\r\n                  (예) 문당 주공, 연수동 주공3차\r\n                </Grid>\r\n              </Grid>\r\n              <Grid className=\"address-ex\">\r\n                <Grid className=\"address-ex-title\">사서함명 + 번호</Grid>\r\n                <Grid className=\"real-address\">\r\n                  (예) 분당우체국사서함 1~100\r\n                </Grid>\r\n              </Grid>\r\n              <Grid className=\"address-dialog-img\">\r\n                <img src=\"/img/letsmeet.png\" alt=\"logo\" />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          {/* kakao api 주소 나타내는 영역 */}\r\n          <List component=\"nav\" aria-label=\"contacts\">\r\n            {results.map((address, i) => (\r\n              <ListItem\r\n                button\r\n                onClick={(e) => handleAddressChange(address, e)} //why?\r\n                key={i}\r\n              >\r\n                <ListItemText\r\n                  primary={address.place_name}\r\n                  secondary={\r\n                    address.road_address_name\r\n                      ? address.road_address_name\r\n                      : address.address_name\r\n                  }\r\n                />\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n        </Grid>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserInsert;\r\n","C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\config.js",[],"C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\components\\index.js",[],"C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\components\\UserItem.js",["128"],"C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\components\\Header.js",["129"],"C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\components\\Findmidplace.js",[],"C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\components\\Top3.js",[],"C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\components\\TimeTable.js",["130","131","132"],"C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\components\\Comment.js",["133","134"],"C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\components\\Yookha.js",["135"],"C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\components\\ShareModal.js",[],"C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\components\\Commentitem.js",[],"C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\function\\timeTableFunc.js",["136"],"C:\\Users\\swamy\\OneDrive\\Desktop\\DBS\\FrontEnd\\src\\function\\getString.js",[],{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","severity":1,"message":"142","line":13,"column":13,"nodeType":"143","endLine":13,"endColumn":63},{"ruleId":"144","severity":1,"message":"145","line":3,"column":10,"nodeType":"146","messageId":"147","endLine":3,"endColumn":14},{"ruleId":"144","severity":1,"message":"148","line":41,"column":63,"nodeType":"146","messageId":"147","endLine":41,"endColumn":74},{"ruleId":"149","severity":1,"message":"150","line":112,"column":19,"nodeType":"151","messageId":"152","endLine":112,"endColumn":30},{"ruleId":"153","severity":1,"message":"154","line":79,"column":18,"nodeType":"155","messageId":"156","endLine":79,"endColumn":20},{"ruleId":"141","severity":1,"message":"142","line":94,"column":13,"nodeType":"143","endLine":94,"endColumn":68},{"ruleId":"141","severity":1,"message":"142","line":105,"column":13,"nodeType":"143","endLine":105,"endColumn":73},{"ruleId":"157","severity":1,"message":"158","line":17,"column":6,"nodeType":"159","endLine":17,"endColumn":8,"suggestions":"160"},{"ruleId":"161","severity":1,"message":"162","line":58,"column":7,"nodeType":"146","messageId":"163","endLine":58,"endColumn":17},{"ruleId":"144","severity":1,"message":"164","line":11,"column":8,"nodeType":"146","messageId":"147","endLine":11,"endColumn":23},{"ruleId":"141","severity":1,"message":"142","line":155,"column":6,"nodeType":"143","endLine":155,"endColumn":50},{"ruleId":"141","severity":1,"message":"142","line":173,"column":10,"nodeType":"143","endLine":173,"endColumn":54},{"ruleId":"144","severity":1,"message":"165","line":4,"column":3,"nodeType":"146","messageId":"147","endLine":4,"endColumn":13},{"ruleId":"144","severity":1,"message":"166","line":6,"column":3,"nodeType":"146","messageId":"147","endLine":6,"endColumn":12},{"ruleId":"144","severity":1,"message":"167","line":7,"column":3,"nodeType":"146","messageId":"147","endLine":7,"endColumn":13},{"ruleId":"144","severity":1,"message":"168","line":22,"column":10,"nodeType":"146","messageId":"147","endLine":22,"endColumn":17},{"ruleId":"144","severity":1,"message":"169","line":54,"column":15,"nodeType":"146","messageId":"147","endLine":54,"endColumn":22},{"ruleId":"141","severity":1,"message":"142","line":11,"column":9,"nodeType":"143","endLine":11,"endColumn":61},{"ruleId":"144","severity":1,"message":"145","line":3,"column":9,"nodeType":"146","messageId":"147","endLine":3,"endColumn":13},{"ruleId":"144","severity":1,"message":"170","line":24,"column":9,"nodeType":"146","messageId":"147","endLine":24,"endColumn":13},{"ruleId":"157","severity":1,"message":"171","line":44,"column":5,"nodeType":"159","endLine":44,"endColumn":18,"suggestions":"172"},{"ruleId":"144","severity":1,"message":"173","line":345,"column":22,"nodeType":"146","messageId":"147","endLine":345,"endColumn":32},{"ruleId":"144","severity":1,"message":"174","line":6,"column":8,"nodeType":"146","messageId":"147","endLine":6,"endColumn":23},{"ruleId":"141","severity":1,"message":"142","line":75,"column":5,"nodeType":"143","endLine":75,"endColumn":50},{"ruleId":"144","severity":1,"message":"175","line":1,"column":27,"nodeType":"146","messageId":"147","endLine":1,"endColumn":36},{"ruleId":"176","severity":1,"message":"177","line":38,"column":31,"nodeType":"155","messageId":"178","endLine":38,"endColumn":32},"no-native-reassign",["179"],"no-negated-in-lhs",["180"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'endGetMonth' is assigned a value but never used.","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'mapScript'. Either include it or remove the dependency array.","ArrayExpression",["181"],"no-redeclare","'infowindow' is already defined.","redeclared","'AccessAlarmIcon' is defined but never used.","'Typography' is defined but never used.","'InputBase' is defined but never used.","'IconButton' is defined but never used.","'address' is assigned a value but never used.","'addList' is assigned a value but never used.","'user' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.data.dates.length'. Either include it or remove the dependency array.",["182"],"'defaultNum' is assigned a value but never used.","'ArrowUpwardIcon' is defined but never used.","'useEffect' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","no-global-assign","no-unsafe-negation",{"desc":"183","fix":"184"},{"desc":"185","fix":"186"},"Update the dependencies array to be: [mapScript]",{"range":"187","text":"188"},"Update the dependencies array to be: [props.data.dates.length, props.dates]",{"range":"189","text":"190"},[469,471],"[mapScript]",[1673,1686],"[props.data.dates.length, props.dates]"]