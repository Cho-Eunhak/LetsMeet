[{"C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\index.js":"1","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\reportWebVitals.js":"2","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\App.js":"3","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\pages\\index.js":"4","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\pages\\Guide.js":"5","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\pages\\Main.js":"6","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\pages\\PlaceMain.js":"7","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\pages\\CreatePlan.js":"8","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\pages\\ManagePlan.js":"9","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\pages\\SearchPlace.js":"10","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\config.js":"11","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\components\\UserInsert.js":"12","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\components\\UserList.js":"13","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\components\\index.js":"14","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\components\\UserItem.js":"15","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\components\\Findmidplace.js":"16","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\components\\ShareModal.js":"17","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\components\\Yookha.js":"18","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\components\\Top3.js":"19","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\components\\Comment.js":"20","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\components\\Header.js":"21","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\components\\TimeTable.js":"22","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\components\\Commentitem.js":"23","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\function\\getString.js":"24","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\function\\timeTableFunc.js":"25"},{"size":517,"mtime":1611036671887,"results":"26","hashOfConfig":"27"},{"size":375,"mtime":1611011767564,"results":"28","hashOfConfig":"27"},{"size":209,"mtime":1611011767557,"results":"29","hashOfConfig":"27"},{"size":307,"mtime":1611200460868,"results":"30","hashOfConfig":"27"},{"size":415,"mtime":1611200460867,"results":"31","hashOfConfig":"27"},{"size":652,"mtime":1611242272916,"results":"32","hashOfConfig":"27"},{"size":4134,"mtime":1611200567866,"results":"33","hashOfConfig":"27"},{"size":7412,"mtime":1611240029659,"results":"34","hashOfConfig":"27"},{"size":5663,"mtime":1611242304962,"results":"35","hashOfConfig":"27"},{"size":13986,"mtime":1611200567866,"results":"36","hashOfConfig":"27"},{"size":43,"mtime":1611200460866,"results":"37","hashOfConfig":"27"},{"size":6401,"mtime":1611200567864,"results":"38","hashOfConfig":"27"},{"size":338,"mtime":1611200460864,"results":"39","hashOfConfig":"27"},{"size":337,"mtime":1611200460866,"results":"40","hashOfConfig":"27"},{"size":427,"mtime":1611200460864,"results":"41","hashOfConfig":"27"},{"size":538,"mtime":1611237302553,"results":"42","hashOfConfig":"27"},{"size":1328,"mtime":1611200460862,"results":"43","hashOfConfig":"27"},{"size":4665,"mtime":1611240781434,"results":"44","hashOfConfig":"27"},{"size":2286,"mtime":1611239840564,"results":"45","hashOfConfig":"27"},{"size":2832,"mtime":1611238883881,"results":"46","hashOfConfig":"27"},{"size":514,"mtime":1611200460862,"results":"47","hashOfConfig":"27"},{"size":11454,"mtime":1611200567864,"results":"48","hashOfConfig":"27"},{"size":387,"mtime":1611011767558,"results":"49","hashOfConfig":"27"},{"size":1113,"mtime":1611200460866,"results":"50","hashOfConfig":"27"},{"size":4112,"mtime":1611200460866,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1yjxj01",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"54"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"54"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"54"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"54"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"54"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"54"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"54"},"C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\index.js",[],["111","112"],"C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\reportWebVitals.js",[],"C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\App.js",[],"C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\pages\\index.js",[],"C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\pages\\Guide.js",["113"],"import React from 'react';\r\nimport { Button } from '@material-ui/core';\r\n\r\nconst Guide = ({ history }) => {\r\n\r\n\tconst goBack = () => {\r\n\t\thistory.goBack();\r\n\t}\r\n\r\n    return (\r\n        <div className=\"guide-con\">\r\n\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={goBack}>Go Back</Button>\r\n            <img className=\"guide-img\" src=\"/img/guide.png\" />\r\n        </div>\r\n    )\r\n}\r\n\r\n    export default Guide;\r\n","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\pages\\Main.js",[],"C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\pages\\PlaceMain.js",["114","115","116"],"import React, { useState, useRef, useCallback } from \"react\";\r\nimport { Container, Button, Grid } from \"@material-ui/core\";\r\nimport UserList from \"../components/UserList\";\r\nimport UserInsert from \"../components/UserInsert\";\r\nimport PlaceIcon from \"@material-ui/icons/Place\";\r\nimport { Header } from \"../components\";\r\nimport \"../scss/pages/_PlaceMain.scss\";\r\n\r\nconst PlaceMain = ({ history }) => {\r\n  //장소 api에서 title(planName) 받아와야함\r\n  const title = \"비주얼팀\";\r\n  const [users, setUsers] = useState([\r\n    // sample\r\n    // {\r\n    //   id: 1,\r\n    //   name: \"소정\",\r\n    //   address: \"동국대\",\r\n    // },\r\n  ]); // map()을 이용하려면 배열로 적어주기\r\n\r\n  //----------------------user을 UserList에 삽입----------------------\r\n\r\n  const nextId = useRef(1);\r\n  const onInsert = useCallback(\r\n    (name, address, ipCoords) => {\r\n      if (name.length === 0) {\r\n        // 유저이름이 빈칸이라면 \"유저3\", \"유저3의 현재위치\" 식으로 반환\r\n        const userslen = users.length + 1;\r\n        name = `유저${userslen}`;\r\n        address = `${name}의 현재 위치`;\r\n      }\r\n      const user = {\r\n        name,\r\n        address,\r\n        id: nextId.current,\r\n        ipCoords, //[경도, 위도]\r\n      };\r\n      setUsers(users.concat(user));\r\n      nextId.current += 1; // nextId 1씩 더하기\r\n    },\r\n    [users]\r\n  );\r\n\r\n  //----------------------가운데 지점 찾기----------------------\r\n\r\n  // 사실은 circumcenter을 사용해야 하지만 일단 centroid을 사용 -> 야매.....\r\n  const searchCenter = () => {\r\n    if (users.length > 1) {\r\n      let longSum = 0;\r\n      let latSum = 0;\r\n      var usersLong = users.map((user) => user.ipCoords[0]); // map은 배열로 저장한다ㅠㅠㅠㅠ\r\n      var usersLat = users.map((user) => user.ipCoords[1]); // 위도를 배열로 저장하기\r\n      for (let i = 0; i < users.length; i++) {\r\n        // 위도, 경도 각각 sum 구하기\r\n        longSum += usersLong[i];\r\n        latSum += usersLat[i];\r\n      }\r\n      let longCenter = longSum / users.length;\r\n      let latCenter = latSum / users.length;\r\n      history.push(`/SearchPlace/${longCenter}/${latCenter}`); //경도, 위도 -> queryString으로 데이터 넘겨주기\r\n    } else {\r\n      alert(\"두 명 이상의 친구가 필요해요!\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Header/>\r\n      <Grid className=\"place-main-title\">⏰  {title} 디자인 회의</Grid>\r\n      <Grid className=\"place-mid-title\">중간지점 찾기 📍</Grid>\r\n      <Grid className=\"place-cont\">\r\n        <Grid className=\"place-left-cont\">\r\n          <Grid className=\"place-user-list\">\r\n            {\r\n              users==\"\"?\r\n                <Grid className=\"place-user-none\">\r\n                  아직 아무도 위치를 등록하지 않았어요.<br/>\r\n                  위치를 등록해주세요!\r\n                </Grid>\r\n                :<UserList users={users}/>\r\n            }\r\n          </Grid>\r\n        </Grid>\r\n        <Grid className=\"place-right-cont\">\r\n          <Grid className=\"place-my-place\">\r\n            <img className=\"place-img-my\" src=\"/img/myPlace.jpg\"/>\r\n            <UserInsert users={users} onInsert={onInsert} />\r\n            <Grid className=\"place-my-title\">\r\n              출발 할 현재 내 위치를 등록하고,<br/>\r\n              서로의 위치를 공유하면서<br/>\r\n              약속 장소를 정해보세요.\r\n            </Grid>\r\n          </Grid>\r\n          <Grid className=\"place-our-mid\">\r\n            <img className=\"place-img-mid\" src=\"/img/middlePlace.png\"/>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={searchCenter}>\r\n              <PlaceIcon></PlaceIcon>중간지점 보기\r\n            </Button>\r\n            <Grid className=\"place-our-title\">\r\n              각자 입력하신 위치를 기반으로 하여,<br/>\r\n              최적의 약속 장소를 정하기 위한<br/>\r\n              중간 지점을 알려드려요.\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PlaceMain;\r\n","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\pages\\CreatePlan.js",["117","118"],"C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\pages\\ManagePlan.js",["119"],"C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\pages\\SearchPlace.js",["120","121"],"import React, { useEffect } from \"react\";\r\nimport queryString from \"query-string\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport \"../scss/pages/_SearchPlace.scss\";\r\nimport { Header } from \"../components\";\r\n\r\nconst { kakao } = window;\r\n\r\nconst SearchPlace = ({ location, match }) => {\r\n  const query = queryString.parse(location.search);\r\n  console.log(query);\r\n\r\n  //---------------------지도 생성하기---------------------\r\n\r\n  useEffect(() => {\r\n    mapScript();\r\n  }, []);\r\n\r\n  const mapScript = () => {\r\n    let container = document.getElementById(\"map\");\r\n    let options = {\r\n      center: new kakao.maps.LatLng(\r\n        match.params.latCenter,\r\n        match.params.longCenter\r\n      ),\r\n      level: 7,\r\n    };\r\n\r\n    //---------------------공통 코드---------------------\r\n\r\n    const map = new kakao.maps.Map(container, options);\r\n\r\n    //---------------------공통 코드---------------------\r\n\r\n    //---------------------우리가 만날 위치 텍스트로 표시---------------------\r\n\r\n    var iwContent = '<div style=\"padding:5px;\">우리가 만날 위치!</div>', // 인포윈도우에 표출될 내용으로 HTML 문자열이나 document element가 가능합니다\r\n      iwPosition = new kakao.maps.LatLng(\r\n        match.params.latCenter,\r\n        match.params.longCenter\r\n      ), //인포윈도우 표시 위치입니다\r\n      iwRemoveable = true; // removeable 속성을 ture 로 설정하면 인포윈도우를 닫을 수 있는 x버튼이 표시됩니다\r\n\r\n    // 인포윈도우를 생성하고 지도에 표시합니다\r\n    var infowindow = new kakao.maps.InfoWindow({\r\n      map: map, // 인포윈도우가 표시될 지도\r\n      position: iwPosition,\r\n      content: iwContent,\r\n      removable: iwRemoveable,\r\n    });\r\n\r\n    //---------------------지도 클릭하면 주소 마커 표시---------------------\r\n\r\n    // 주소-좌표 변환 객체를 생성합니다\r\n    var geocoder = new kakao.maps.services.Geocoder();\r\n\r\n    var marker = new kakao.maps.Marker(), // 클릭한 위치를 표시할 마커입니다\r\n      infowindow = new kakao.maps.InfoWindow({ zindex: 1 }); // 클릭한 위치에 대한 주소를 표시할 인포윈도우입니다\r\n\r\n    // 현재 지도 중심좌표로 주소를 검색해서 지도 좌측 상단에 표시합니다\r\n    searchAddrFromCoords(map.getCenter(), displayCenterInfo);\r\n\r\n    // 지도를 클릭했을 때 클릭 위치 좌표에 대한 주소정보를 표시하도록 이벤트를 등록합니다\r\n    kakao.maps.event.addListener(map, \"click\", function (mouseEvent) {\r\n      searchDetailAddrFromCoords(mouseEvent.latLng, function (result, status) {\r\n        if (status === kakao.maps.services.Status.OK) {\r\n          var detailAddr = !!result[0].road_address\r\n            ? \"<div>도로명주소 : \" +\r\n              result[0].road_address.address_name +\r\n              \"</div>\"\r\n            : \"\";\r\n          detailAddr +=\r\n            \"<div>지번 주소 : \" + result[0].address.address_name + \"</div>\";\r\n\r\n          var content =\r\n            '<div class=\"bAddr\">' +\r\n            '<span class=\"address-popup-title\">법정동 주소정보</span>' +\r\n            detailAddr +\r\n            \"</div>\";\r\n\r\n          // 마커를 클릭한 위치에 표시합니다\r\n          marker.setPosition(mouseEvent.latLng);\r\n          marker.setMap(map);\r\n\r\n          // 인포윈도우에 클릭한 위치에 대한 법정동 상세 주소정보를 표시합니다\r\n          infowindow.setContent(content);\r\n          infowindow.open(map, marker);\r\n        }\r\n      });\r\n    });\r\n    // 중심 좌표나 확대 수준이 변경됐을 때 지도 중심 좌표에 대한 주소 정보를 표시하도록 이벤트를 등록합니다\r\n    kakao.maps.event.addListener(map, \"idle\", function () {\r\n      searchAddrFromCoords(map.getCenter(), displayCenterInfo);\r\n    });\r\n\r\n    function searchAddrFromCoords(coords, callback) {\r\n      // 좌표로 행정동 주소 정보를 요청합니다\r\n      geocoder.coord2RegionCode(coords.getLng(), coords.getLat(), callback);\r\n    }\r\n\r\n    function searchDetailAddrFromCoords(coords, callback) {\r\n      // 좌표로 법정동 상세 주소 정보를 요청합니다\r\n      geocoder.coord2Address(coords.getLng(), coords.getLat(), callback);\r\n    }\r\n\r\n    // 지도 좌측상단에 지도 중심좌표에 대한 주소정보를 표출하는 함수입니다\r\n    function displayCenterInfo(result, status) {\r\n      if (status === kakao.maps.services.Status.OK) {\r\n        var infoDiv = document.getElementById(\"centerAddr\");\r\n\r\n        for (var i = 0; i < result.length; i++) {\r\n          // 행정동의 region_type 값은 'H' 이므로\r\n          if (result[i].region_type === \"H\") {\r\n            infoDiv.innerHTML = result[i].address_name;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    //---------------------카테고리 별로 지도에 나타내기\r\n    // 마커를 클릭했을 때 해당 장소의 상세정보를 보여줄 커스텀오버레이입니다\r\n    var placeOverlay = new kakao.maps.CustomOverlay({ zIndex: 1 }),\r\n      contentNode = document.createElement(\"div\"), // 커스텀 오버레이의 컨텐츠 엘리먼트 입니다\r\n      markers = [], // 마커를 담을 배열입니다\r\n      currCategory = \"\"; // 현재 선택된 카테고리를 가지고 있을 변수입니다\r\n\r\n    // 장소 검색 객체를 생성합니다\r\n    var ps = new kakao.maps.services.Places(map);\r\n\r\n    // 지도에 idle 이벤트를 등록합니다\r\n    kakao.maps.event.addListener(map, \"idle\", searchPlaces);\r\n\r\n    // 커스텀 오버레이의 컨텐츠 노드에 css class를 추가합니다\r\n    contentNode.className = \"placeinfo_wrap\";\r\n\r\n    // 커스텀 오버레이의 컨텐츠 노드에 mousedown, touchstart 이벤트가 발생했을때\r\n    // 지도 객체에 이벤트가 전달되지 않도록 이벤트 핸들러로 kakao.maps.event.preventMap 메소드를 등록합니다\r\n    addEventHandle(contentNode, \"mousedown\", kakao.maps.event.preventMap);\r\n    addEventHandle(contentNode, \"touchstart\", kakao.maps.event.preventMap);\r\n\r\n    // 커스텀 오버레이 컨텐츠를 설정합니다\r\n    placeOverlay.setContent(contentNode);\r\n\r\n    // 각 카테고리에 클릭 이벤트를 등록합니다\r\n    addCategoryClickEvent();\r\n\r\n    // 엘리먼트에 이벤트 핸들러를 등록하는 함수입니다\r\n    function addEventHandle(target, type, callback) {\r\n      if (target.addEventListener) {\r\n        target.addEventListener(type, callback);\r\n      } else {\r\n        target.attachEvent(\"on\" + type, callback);\r\n      }\r\n    }\r\n\r\n    // 카테고리 검색을 요청하는 함수입니다\r\n    function searchPlaces() {\r\n      if (!currCategory) {\r\n        return;\r\n      }\r\n\r\n      // 커스텀 오버레이를 숨깁니다\r\n      placeOverlay.setMap(null);\r\n\r\n      // 지도에 표시되고 있는 마커를 제거합니다\r\n      removeMarker();\r\n\r\n      ps.categorySearch(currCategory, placesSearchCB, { useMapBounds: true });\r\n    }\r\n\r\n    // 장소검색이 완료됐을 때 호출되는 콜백함수 입니다\r\n    function placesSearchCB(data, status, pagination) {\r\n      if (status === kakao.maps.services.Status.OK) {\r\n        // 정상적으로 검색이 완료됐으면 지도에 마커를 표출합니다\r\n        displayPlaces(data);\r\n      } else if (status === kakao.maps.services.Status.ZERO_RESULT) {\r\n        // 검색결과가 없는경우 해야할 처리가 있다면 이곳에 작성해 주세요\r\n      } else if (status === kakao.maps.services.Status.ERROR) {\r\n        // 에러로 인해 검색결과가 나오지 않은 경우 해야할 처리가 있다면 이곳에 작성해 주세요\r\n      }\r\n    }\r\n\r\n    // 지도에 마커를 표출하는 함수입니다\r\n    function displayPlaces(places) {\r\n      // 몇번째 카테고리가 선택되어 있는지 얻어옵니다\r\n      // 이 순서는 스프라이트 이미지에서의 위치를 계산하는데 사용됩니다\r\n      var order = document\r\n        .getElementById(currCategory)\r\n        .getAttribute(\"data-order\");\r\n\r\n      for (var i = 0; i < places.length; i++) {\r\n        // 마커를 생성하고 지도에 표시합니다\r\n        var marker = addMarker(\r\n          new kakao.maps.LatLng(places[i].y, places[i].x),\r\n          order\r\n        );\r\n\r\n        // 마커와 검색결과 항목을 클릭 했을 때\r\n        // 장소정보를 표출하도록 클릭 이벤트를 등록합니다\r\n        (function (marker, place) {\r\n          kakao.maps.event.addListener(marker, \"click\", function () {\r\n            displayPlaceInfo(place);\r\n          });\r\n        })(marker, places[i]);\r\n      }\r\n    }\r\n\r\n    // 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다\r\n    function addMarker(position, order) {\r\n      var imageSrc =\r\n          \"https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/places_category.png\", // 마커 이미지 url, 스프라이트 이미지를 씁니다\r\n        imageSize = new kakao.maps.Size(27, 28), // 마커 이미지의 크기\r\n        imgOptions = {\r\n          spriteSize: new kakao.maps.Size(72, 208), // 스프라이트 이미지의 크기\r\n          spriteOrigin: new kakao.maps.Point(46, order * 36), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\r\n          offset: new kakao.maps.Point(11, 28), // 마커 좌표에 일치시킬 이미지 내에서의 좌표\r\n        },\r\n        markerImage = new kakao.maps.MarkerImage(\r\n          imageSrc,\r\n          imageSize,\r\n          imgOptions\r\n        ),\r\n        marker = new kakao.maps.Marker({\r\n          position: position, // 마커의 위치\r\n          image: markerImage,\r\n        });\r\n\r\n      marker.setMap(map); // 지도 위에 마커를 표출합니다\r\n      markers.push(marker); // 배열에 생성된 마커를 추가합니다\r\n\r\n      return marker;\r\n    }\r\n\r\n    // 지도 위에 표시되고 있는 마커를 모두 제거합니다\r\n    function removeMarker() {\r\n      for (var i = 0; i < markers.length; i++) {\r\n        markers[i].setMap(null);\r\n      }\r\n      markers = [];\r\n    }\r\n\r\n    // 클릭한 마커에 대한 장소 상세정보를 커스텀 오버레이로 표시하는 함수입니다\r\n    function displayPlaceInfo(place) {\r\n      var content =\r\n        '<div class=\"placeinfo\">' +\r\n        '   <a class=\"title\" href=\"' +\r\n        place.place_url +\r\n        '\" target=\"_blank\" title=\"' +\r\n        place.place_name +\r\n        '\">' +\r\n        place.place_name +\r\n        \"</a>\";\r\n\r\n      if (place.road_address_name) {\r\n        content +=\r\n          '    <span title=\"' +\r\n          place.road_address_name +\r\n          '\">' +\r\n          place.road_address_name +\r\n          \"</span>\" +\r\n          '  <span class=\"jibun\" title=\"' +\r\n          place.address_name +\r\n          '\">(지번 : ' +\r\n          place.address_name +\r\n          \")</span>\";\r\n      } else {\r\n        content +=\r\n          '    <span title=\"' +\r\n          place.address_name +\r\n          '\">' +\r\n          place.address_name +\r\n          \"</span>\";\r\n      }\r\n\r\n      content +=\r\n        '    <span class=\"tel\">' +\r\n        place.phone +\r\n        \"</span>\" +\r\n        \"</div>\" +\r\n        '<div class=\"after\"></div>';\r\n\r\n      contentNode.innerHTML = content;\r\n      placeOverlay.setPosition(new kakao.maps.LatLng(place.y, place.x));\r\n      placeOverlay.setMap(map);\r\n    }\r\n\r\n    // 각 카테고리에 클릭 이벤트를 등록합니다\r\n    function addCategoryClickEvent() {\r\n      var category = document.getElementById(\"category\"),\r\n        children = category.children;\r\n\r\n      for (var i = 0; i < children.length; i++) {\r\n        children[i].onclick = onClickCategory;\r\n      }\r\n    }\r\n\r\n    // 카테고리를 클릭했을 때 호출되는 함수입니다\r\n    function onClickCategory() {\r\n      var id = this.id,\r\n        className = this.className;\r\n\r\n      placeOverlay.setMap(null);\r\n\r\n      if (className === \"on\") {\r\n        currCategory = \"\";\r\n        changeCategoryClass();\r\n        removeMarker();\r\n      } else {\r\n        currCategory = id;\r\n        changeCategoryClass(this);\r\n        searchPlaces();\r\n      }\r\n    }\r\n\r\n    // 클릭된 카테고리에만 클릭된 스타일을 적용하는 함수입니다\r\n    function changeCategoryClass(el) {\r\n      var category = document.getElementById(\"category\"),\r\n        children = category.children,\r\n        i;\r\n\r\n      for (i = 0; i < children.length; i++) {\r\n        children[i].className = \"\";\r\n      }\r\n\r\n      if (el) {\r\n        el.className = \"on\";\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Header/>\r\n      <Grid className=\"map-title\">우리 어디서 만날까? 바로 여기!📍</Grid>\r\n      {/* <Grid>\r\n        위도는 {match.params.latCenter}, 경도는 {match.params.longCenter}\r\n      </Grid> */}\r\n      <Grid className=\"map_wrap\">\r\n        <Grid id=\"map\">map here!</Grid> {/* 지도 오는 곳 */}\r\n        <Grid className=\"hAddr\">\r\n          <Grid className=\"address-title\">지도중심기준 행정동 주소정보</Grid>\r\n          <Grid id=\"centerAddr\"></Grid>\r\n        </Grid>\r\n        <ul id=\"category\">\r\n          <li id=\"FD6\" data-order=\"0\">\r\n            <span class=\"category_bg bank\"></span>\r\n            음식점\r\n          </li>\r\n          <li id=\"CT1\" data-order=\"1\">\r\n            <span class=\"category_bg mart\"></span>\r\n            문화시설\r\n          </li>\r\n          <li id=\"PM9\" data-order=\"2\">\r\n            <span class=\"category_bg pharmacy\"></span>\r\n            약국\r\n          </li>\r\n          <li id=\"SW8\" data-order=\"3\">\r\n            <span class=\"category_bg oil\"></span>\r\n            지하철\r\n          </li>\r\n          <li id=\"CE7\" data-order=\"4\">\r\n            <span class=\"category_bg cafe\"></span>\r\n            카페\r\n          </li>\r\n          <li id=\"CS2\" data-order=\"5\">\r\n            <span class=\"category_bg store\"></span>\r\n            편의점\r\n          </li>\r\n        </ul>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchPlace;\r\n","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\config.js",[],"C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\components\\UserInsert.js",["122","123"],"import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Typography,\r\n  Grid,\r\n  InputBase,\r\n  IconButton,\r\n  Dialog,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\n\r\nconst { kakao } = window;\r\n\r\nconst UserInsert = ({ onInsert, users }) => {\r\n  const [dialogOpen, setdialogOpen] = useState(false);\r\n  const [name, setName] = useState(\"\");\r\n  const [results, setResults] = useState([]);\r\n  const [address, setAddress] = useState([]);\r\n\r\n  // 장소 추가 버튼 누르면 Dialog open\r\n  const handleClickOpen = () => {\r\n    setdialogOpen(true);\r\n  };\r\n\r\n  // Dialog close\r\n  const handleClose = () => {\r\n    setdialogOpen(false);\r\n  };\r\n\r\n  // textfield 이름 변경\r\n  const handleNameChange = (e) => {\r\n    setName(e.target.value);\r\n  };\r\n\r\n  //----------------------내 위치 받아오기----------------------\r\n\r\n  const handleMyPosition = () => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition((position) => {\r\n        const longitude = position.coords.longitude; // 경도\r\n        const latitude = position.coords.latitude; // 위도\r\n        const positionArray = [longitude, latitude]; //경도,위도\r\n        // var locPosition = new kakao.maps.LatLng(latitude, longitude); // 좌표값으로 변환 -> 객체이다\r\n        // console.log(Object.entries(locPosition));\r\n        // console.log(locPosition.La);\r\n        // const positionArray = Object.entries(locPosition); // 배열로 변환\r\n        const addList = {\r\n          name,\r\n          positionArray,\r\n        };\r\n        console.log(positionArray);\r\n        onInsert(name, \"\", positionArray);\r\n        setdialogOpen(false);\r\n        setName(\"\");\r\n      });\r\n    } else {\r\n      alert(\"Geolocation is not supported by your browser\");\r\n    }\r\n  };\r\n\r\n  //----------------------검색하기 위한 함수----------------------\r\n\r\n  const handleSubmit = (e) => {\r\n    // 장소 검색 객체를 생성합니다\r\n    var ps = new kakao.maps.services.Places();\r\n\r\n    // 키워드로 장소를 검색합니다\r\n    searchPlaces();\r\n\r\n    // 키워드 검색을 요청하는 함수입니다\r\n    function searchPlaces() {\r\n      var keyword = document.getElementById(\"input-address\").value;\r\n\r\n      if (!keyword.replace(/^\\s+|\\s+$/g, \"\")) {\r\n        alert(\"키워드를 입력해주세요!\");\r\n        return false;\r\n      }\r\n\r\n      // 장소검색 객체를 통해 키워드로 장소검색을 요청합니다\r\n      ps.keywordSearch(keyword, placesSearchCB);\r\n    }\r\n\r\n    // 장소검색이 완료됐을 때 호출되는 콜백함수 입니다\r\n    function placesSearchCB(data, status, pagination) {\r\n      if (status === kakao.maps.services.Status.OK) {\r\n        // 정상적으로 검색 완료\r\n        getListItem(data); // List로 나타내기\r\n      } else if (status === kakao.maps.services.Status.ZERO_RESULT) {\r\n        alert(\"검색 결과가 존재하지 않습니다.\");\r\n        return;\r\n      } else if (status === kakao.maps.services.Status.ERROR) {\r\n        alert(\"검색 결과 중 오류가 발생했습니다.\");\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n  //----------------------검색 결과 주소들을 결과로 반환 -> List로 나타내기 위함----------------------\r\n\r\n  let datas = [];\r\n  const getListItem = (places) => {\r\n    // console.log(places);\r\n    datas = places;\r\n    setResults(datas);\r\n  };\r\n\r\n  //----------------------유저 이름과 검색한 주소를 UserList에 삽입하기----------------------\r\n\r\n  const handleAddressChange = (address, e) => {\r\n    setAddress(address);\r\n\r\n    // 주소-좌표 변환 객체를 생성합니다\r\n    var geocoder = new kakao.maps.services.Geocoder();\r\n\r\n    // 주소로 좌표를 검색합니다\r\n    geocoder.addressSearch(address.address_name, function (result, status) {\r\n      const coordsArray = [parseFloat(address.x), parseFloat(address.y)]; // 경도, 위도\r\n      // 정상적으로 검색이 완료됐으면\r\n      // if (status === kakao.maps.services.Status.OK) {\r\n      //   var coords = new kakao.maps.LatLng(result[0].y, result[0].x); // 객체이다. 배열로 변환해주자.\r\n      // } else {\r\n      //   alert(\"주소를 정확히 입력해 주세요!\");\r\n      // }\r\n      // const coordsArray = Object.entries(coords); // 배열로 변환\r\n      // console.log(coordsArray);\r\n      onInsert(name, address.place_name, coordsArray);\r\n    });\r\n    setdialogOpen(false);\r\n    setName(\"\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n        내 위치 등록하기\r\n      </Button>\r\n      <Dialog\r\n        onClose={handleClose}\r\n        aria-labelledby=\"customized-dialog-title\"\r\n        open={dialogOpen}\r\n      >\r\n        <Grid onSubmit={handleSubmit}>\r\n          <Typography>이름</Typography>\r\n          <TextField\r\n            id=\"outlined-dense\"\r\n            label=\"나의 이름\"\r\n            value={name}\r\n            onChange={handleNameChange}\r\n            margin=\"dense\"\r\n            variant=\"outlined\"\r\n          />\r\n          <IconButton aria-label=\"Directions\" onClick={handleMyPosition}>\r\n            <Typography variant=\"body2\" color=\"primary\">\r\n              내 위치\r\n            </Typography>\r\n          </IconButton>\r\n          <InputBase\r\n            id=\"input-address\"\r\n            placeholder=\"어디서 출발할거야?\"\r\n            onKeyPress={(event) => {\r\n              if (event.key === \"Enter\") {\r\n                handleSubmit();\r\n              }\r\n            }}\r\n          />\r\n          <Button variant=\"outlined\" color=\"primary\" onClick={handleSubmit}>\r\n            장소검색\r\n          </Button>\r\n          {/* kakao api 주소 나타내는 영역 */}\r\n          <List component=\"nav\" aria-label=\"contacts\">\r\n            {results.map((address, i) => (\r\n              <ListItem\r\n                button\r\n                onClick={(e) => handleAddressChange(address, e)} //why?\r\n                key={i}\r\n              >\r\n                <ListItemText\r\n                  primary={address.place_name}\r\n                  secondary={address.address_name}\r\n                />\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n        </Grid>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserInsert;\r\n","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\components\\UserList.js",[],"C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\components\\index.js",[],"C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\components\\UserItem.js",[],"C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\components\\Findmidplace.js",[],"C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\components\\ShareModal.js",["124"],"import React, { useEffect } from 'react';\r\n\r\nimport { Grid, Button, Modal, Fade } from '@material-ui/core';\r\n\r\nconst ShareModal = (props) => {\r\n\tconst kakaoShare = () => {\r\n\t\tprops &&\r\n\t\twindow.Kakao.Link.sendDefault({\r\n\t\t\tobjectType: 'feed',\r\n\t\t\tcontent: {\r\n\t\t\t  title: \"Let's Meet(렛츠 밋)\",\r\n\t\t\t  description: \"팀 일정 결정 및 공유 사이트\",\r\n\t\t\t  imageUrl:\tprops.shareImg,\r\n\t\t\t  link: {\r\n\t\t\t\twebUrl: window.location.href,\r\n\t\t\t  },\r\n\t\t\t},\r\n\t\t\tbuttons: [\r\n\t\t\t  {\r\n\t\t\t\ttitle: '일정 보러 가기',\r\n\t\t\t\tlink: {\r\n\t\t\t\t  webUrl: window.location.href,\r\n\t\t\t\t},\r\n\t\t\t  },\r\n\t\t\t]\r\n\t\t});\r\n\t}\r\n\r\n\treturn(\r\n\t\t<Modal \r\n\t\t\tclassName=\"share-modal\"\r\n\t\t\topen={props.open}\r\n\t\t\tonClose={props.handleClose}\r\n\t\t>\r\n        \t<Fade in={props.open}>\r\n\t\t\t\t<Grid className=\"modal-con\">\r\n\t\t\t\t\t<Grid className=\"modal-header\">\r\n\t\t\t\t\t\t<h2>이미지 공유</h2>\r\n\t\t\t\t\t\t<Button onClick={props.handleClose}>X</Button>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t{props.shareImg?\r\n\t\t\t\t\t\t<Grid className=\"share-img-con\">\r\n\t\t\t\t\t\t\t<img src={props.shareImg} alt=\"share img\"/>\r\n\t\t\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={kakaoShare}>Share</Button>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t:<Grid className=\"share-des\">이미지를 불러오는 중입니다. 잠시만 기다려주세요!</Grid>\r\n\t\t\t\t\t}\r\n\t\t\t\t</Grid>\r\n\t\t\t</Fade>\r\n\t\t</Modal>\r\n\t);\r\n};\r\n\r\nexport default ShareModal;","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\components\\Yookha.js",["125"],"C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\components\\Top3.js",["126","127","128"],"C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\components\\Comment.js",["129","130"],"C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\components\\Header.js",["131"],"import React from \"react\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport {Link} from \"react-router-dom\"\r\n\r\nconst Header = () => (\r\n  <Grid className=\"header-rule\">\r\n    <Grid className=\"header-logo\">\r\n      <img src=\"/img/letsmeet.png\" alt=\"logo\" />\r\n    </Grid>\r\n    <Grid className=\"goto-manual\">\r\n      <a href=\"/Guide\">사용법 바로가기</a>\r\n    </Grid>\r\n  </Grid>\r\n);\r\n\r\nexport default Header;\r\n//<Link to=\"/Guide\" style={{ textDecoration: 'none', color: 'black' }}>사용법 바로가기</Link>\r\n\r\n","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\components\\TimeTable.js",["132"],"import React, { useState, useEffect } from 'react';\r\nimport clsx from 'clsx';\r\nimport axios from 'axios';\r\n\r\nimport { getMonthDate, getDay, getTimeString } from '../function/getString';\r\nimport { getBool, showDragResult, initializeStill, stillDragging, calCheckArray } from '../function/timeTableFunc';\r\n\r\nimport { Grid } from '@material-ui/core';\r\nimport { Table, TableBody, TableContainer, TableHead, TableRow, TableCell } from '@material-ui/core';\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\r\n\r\nconst TimeTable = (props) => {\r\n\tconst cellNum = 5;\r\n\tconst [timeString, setTS] = useState([]);\r\n\tconst [cellWidth, setCW] = useState([]);\r\n\tconst [nowCell, setNC] = useState(cellNum-1); // 모바일에서 5개 보여주기\r\n\r\n\tconst [dragging, setDragging] = useState(false);\r\n\tconst [dragPos, setDP] = useState({\"start\":[-1, -1], \"end\":[-1, -1]});\r\n\tconst [checkArray, setCA] = useState([]);\r\n\tconst [dragState, setDS] = useState(false); // drag 시작점의 state\r\n\tconst [update, forceUpdate] = useState(true);\r\n\r\n\tuseEffect(()=>{\r\n\t\tsetTS(getTimeString(props.data.start, props.data.end, props.data.gap));\r\n\t}, [props])\r\n\r\n\tuseEffect(()=>{\r\n\t\tlet arr = [];\r\n\t\tfor(let i=0; i<timeString.length; i++)\r\n\t\t\tarr.push(0);\r\n\t\tsetCA(arr);\r\n\t}, [timeString])\r\n\r\n\tuseEffect(()=>{\r\n\t\tlet tmp = [];\r\n\t\tfor(let i=0; i<props.data.dates.length; i++)\r\n\t\t\ttmp.push(0);\r\n\t\tsetCW(tmp);\r\n\t}, [props.dates])\r\n\r\n\tconst removeCell = (num) => {\r\n\t\tconst cell = document.getElementsByClassName('cell'+num);\r\n\t\tfor(let c of cell){\r\n\t\t\tc.classList.add(\"unvisible\");\r\n\t\t\tc.classList.remove(\"visible\");\r\n\t\t}\r\n\t}\r\n\r\n\tconst addCell = (num) => {\r\n\t\tconst cell = document.getElementsByClassName('cell'+num);\r\n\t\tfor(let c of cell){\r\n\t\t\tc.classList.add(\"visible\");\r\n\t\t\tc.classList.remove(\"unvisible\");\r\n\t\t}\r\n\t}\r\n\r\n\tconst prevCell = () => {\r\n\t\tremoveCell(nowCell);\r\n\t\taddCell(nowCell-cellNum);\r\n\t\tsetNC(nowCell-1);\r\n\t}\r\n\r\n\tconst nextCell = () => {\r\n\t\tremoveCell(nowCell-cellNum+1);\r\n\t\taddCell(nowCell+1);\r\n\t\tsetNC(nowCell+1);\r\n\t}\r\n\r\n\tconst startDrag = async (e) => {\r\n\t\tconst rw = e.target.id.split(\"/\");\r\n\t\tawait setDragging(true);\r\n\t\tawait setDP({\"start\": [rw[1], rw[2]], \"end\": [rw[1], rw[2]]});\r\n\t\tawait setDS(getBool(\"rc/\"+rw[1]+\"/\"+rw[2]));\r\n\r\n\t\tforceUpdate(!update);\r\n\t}\r\n\r\n\tconst stillDrag = async (e) => {\r\n\t\tif(!dragging) // drag 중이 아니면\r\n\t\t\treturn;\r\n\t\tif(e.target === undefined)\r\n\t\t\treturn;\r\n\t\tconst rw = e.target.id.split(\"/\");\r\n\t\tawait stillDragging(dragState, dragPos.start, dragPos.end, [rw[1], rw[2]]);\r\n\t\tawait setDP({...dragPos, \"end\":[rw[1], rw[2]]});\r\n\r\n\t\tforceUpdate(!update);\r\n\t}\r\n\r\n\tconst endDrag = async (e) => {\r\n\t\tconst rw = e.target.id.split(\"/\");\r\n\t\tawait setDragging(false);\r\n\t\tawait showDragResult(dragState, true, dragPos.start, [rw[1], rw[2]]);\r\n\t\tcalCheckArray(dragState, dragPos.start, [rw[1], rw[2]], checkArray, props.data.dates.length)\r\n\t\t.then(res => {\r\n\t\t\tsetCA(res);\r\n\t\t})\r\n\t\tawait initializeStill(dragPos.start);\r\n\t\tawait setDP({\"start\":[-1, -1], \"end\":[-1, -1]}); // position 초기화\r\n\t\tawait updateToDB();\r\n\r\n\t\tforceUpdate(!update);\r\n\t}\r\n\r\n\tconst updateToDB = async () => {\r\n\t\tawait axios.put(`https://letsmeeet.azurewebsites.net/api/user/time`, {\r\n\t\t\t//\"checkArray\" : checkArray\r\n\t\t\t\"userId\": \"user11\",\r\n\t\t\t\"userPass\": \"lovesk2\",\r\n\t\t\t\"meetId\": \"177eadfb377e863\",\r\n\t\t\t\"checkArray\" : [1,1,3,0,0,2,0,2,0,1,1,1,1,10,1,1]\r\n\t\t}, {\r\n\t\t\theaders: {\r\n\t\t\t\t'Access-Control-Allow-Origin': '*'\r\n\t\t\t}\r\n\t\t})\r\n\t\t.then(res => {\r\n\t\t\tconsole.log(res);\r\n\t\t})\r\n\t\t.catch(err => {\r\n\t\t\tconsole.log(err);\r\n\t\t})\r\n\t\tawait getGroupTime();\r\n\t}\r\n\r\n\tconst getGroupTime = () => {\r\n\t\tconsole.log(\"get group time\");\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Grid className=\"timetable\">\r\n\t\t\t{ props.type === \"mine\"?\r\n\t\t\t\t<>\r\n\t\t\t\t\t<Grid className=\"timetable-title\"><h2>▶ 나의 가능 시간</h2></Grid>\r\n\t\t\t\t\t<Grid className=\"timetable-with-arrow\">\r\n\t\t\t\t\t\t{nowCell>4?<ArrowBackIosIcon onClick={prevCell} className=\"prev-btn\"/>:undefined}\r\n\t\t\t\t\t\t<TableContainer className=\"timetable-table-con\">\r\n\t\t\t\t\t\t\t<Table id={props.type+'table'} className=\"timetable-table\">\r\n\t\t\t\t\t\t\t\t<TableHead>\r\n\t\t\t\t\t\t\t\t\t<TableRow className=\"timetable-date\">\r\n\t\t\t\t\t\t\t\t\t\t<TableCell className=\"blank date timetable-time-string\"><Grid>____</Grid></TableCell>\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tprops.data.dates.map((date, index) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\tlet clsName = index<cellNum?\"visible\":\"unvisible\";\r\n\t\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell className={clsx(\"date\",\"cell\"+index,clsName)} align=\"center\" key={index}>{getMonthDate(date)}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t<TableRow className=\"timetable-day\">\r\n\t\t\t\t\t\t\t\t\t\t<TableCell className=\"blank day timetable-time-string\"><Grid>____</Grid></TableCell>\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tprops.data.dates.map((date, index) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\tlet clsName = index<cellNum?\"visible\":\"unvisible\";\r\n\t\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell className={clsx(\"day\",\"cell\"+index,clsName)} align=\"center\" key={index}>{getDay(date)}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t</TableHead>\r\n\t\t\t\t\t\t\t\t<TableBody>\r\n\t\t\t\t\t\t\t\t\t{timeString.length!==0?\r\n\t\t\t\t\t\t\t\t\t\ttimeString.map((t, index) =>{\r\n\t\t\t\t\t\t\t\t\t\t\t// 첫시작과 분단위가 같거나 마지막 시간인지 확인\r\n\t\t\t\t\t\t\t\t\t\t\tconst last = index===timeString.length-1;\r\n\t\t\t\t\t\t\t\t\t\t\tconst bool = t.substring(3,5)===props.data.start.substring(3,5) || last;\r\n\t\t\t\t\t\t\t\t\t\t\treturn(\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableRow key={index} className=\"timetable-time\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell className=\"timetable-time-string\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Grid>{ bool? t:undefined }</Grid>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tlast? // 마지막 셀은 출력 x\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tundefined:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tcellWidth.map((_, index2) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet clsName = \"table-body-mine\";\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclsName += index2<cellNum?\" visible\":\" unvisible\";\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclsName += bool?\" midterm\":\" fullterm\";\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell key={\"\"+index+index2} id={\"rc/\"+index+\"/\"+index2} className={clsx(\"not-selected\",\"cell\"+index2, clsName)}></TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t}):undefined\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t</TableBody>\r\n\t\t\t\t\t\t\t</Table>\r\n\t\t\t\t\t\t\t<Table className=\"still-table\">\r\n\t\t\t\t\t\t\t\t<TableHead>\r\n\t\t\t\t\t\t\t\t\t<TableRow className=\"timetable-date\">\r\n\t\t\t\t\t\t\t\t\t\t<TableCell className=\"blank date timetable-time-string\"><Grid>____</Grid></TableCell>\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tprops.data.dates.map((date, index) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\tlet clsName = index<cellNum?\"visible\":\"unvisible\";\r\n\t\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell className={clsx(\"date\",\"cell\"+index,clsName)} align=\"center\" key={index}>{getMonthDate(date)}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t<TableRow className=\"timetable-day\">\r\n\t\t\t\t\t\t\t\t\t\t<TableCell className=\"blank day timetable-time-string\"><Grid>____</Grid></TableCell>\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tprops.data.dates.map((date, index) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\tlet clsName = index<cellNum?\"visible\":\"unvisible\";\r\n\t\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell className={clsx(\"day\",\"cell\"+index,clsName)} align=\"center\" key={index}>{getDay(date)}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t</TableHead>\r\n\t\t\t\t\t\t\t\t<TableBody>\r\n\t\t\t\t\t\t\t\t\t{timeString.length!==0 &&\r\n\t\t\t\t\t\t\t\t\t\ttimeString.map((t, index) =>{\r\n\t\t\t\t\t\t\t\t\t\t\t// 첫시작과 분단위가 같거나 마지막 시간인지 확인\r\n\t\t\t\t\t\t\t\t\t\t\tconst last = index===timeString.length-1;\r\n\t\t\t\t\t\t\t\t\t\t\tconst bool = t.substring(3,5)===props.data.start.substring(3,5) || last;\r\n\t\t\t\t\t\t\t\t\t\t\treturn(\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableRow key={index} className=\"timetable-time\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell className=\"timetable-time-string\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Grid>{ bool? t:undefined }</Grid>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tlast? // 마지막 셀은 출력 x\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tundefined:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tcellWidth.map((_, index2) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet clsName = \"still-body-mine\";\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclsName += index2<cellNum?\" visible\":\" unvisible\";\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell key={\"\"+index+index2} id={\"stillrc/\"+index+\"/\"+index2} onMouseDown={startDrag} onMouseUp={endDrag} onMouseOver={stillDrag} className={clsx(\"cell\"+index2, clsName)}></TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t</TableBody>\r\n\t\t\t\t\t\t\t</Table>\r\n\t\t\t\t\t\t</TableContainer>\r\n\t\t\t\t\t\t{nowCell<cellWidth.length-1?<ArrowForwardIosIcon onClick={nextCell} className=\"next-btn\"/>:undefined}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</> :\r\n\t\t\t\t<>\t\r\n\t\t\t\t\t<Grid className=\"timetable-title\"><h2>▶ 전체 가능 시간</h2></Grid>\r\n\t\t\t\t\t<Grid className=\"timetable-with-arrow\">\r\n\t\t\t\t\t\t{nowCell>4?<ArrowBackIosIcon onClick={prevCell} className=\"prev-btn\"/>:undefined}\r\n\t\t\t\t\t\t<TableContainer className=\"timetable-table-con\">\r\n\t\t\t\t\t\t\t<Table id={props.type+'table'} className=\"timetable-table\">\r\n\t\t\t\t\t\t\t\t<TableHead>\r\n\t\t\t\t\t\t\t\t\t<TableRow className=\"timetable-date\">\r\n\t\t\t\t\t\t\t\t\t\t<TableCell className=\"blank date timetable-time-string\"><Grid>____</Grid></TableCell>\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tprops.data.dates.map((date, index) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\tlet clsName = index<cellNum?\"visible\":\"unvisible\";\r\n\t\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell className={clsx(\"date\",\"cell\"+index,clsName)} align=\"center\" key={index}>{getMonthDate(date)}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t<TableRow className=\"timetable-day\">\r\n\t\t\t\t\t\t\t\t\t\t<TableCell className=\"blank day timetable-time-string\"><Grid>____</Grid></TableCell>\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tprops.data.dates.map((date, index) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\tlet clsName = index<cellNum?\"visible\":\"unvisible\";\r\n\t\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell className={clsx(\"day\",\"cell\"+index,clsName)} align=\"center\" key={index}>{getDay(date)}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t</TableHead>\r\n\t\t\t\t\t\t\t\t<TableBody>\r\n\t\t\t\t\t\t\t\t\t{timeString.length!==0?\r\n\t\t\t\t\t\t\t\t\t\ttimeString.map((t, index) =>{\r\n\t\t\t\t\t\t\t\t\t\t\t// 첫시작과 분단위가 같거나 마지막 시간인지 확인\r\n\t\t\t\t\t\t\t\t\t\t\tconst last = index===timeString.length-1;\r\n\t\t\t\t\t\t\t\t\t\t\tconst bool = t.substring(3,5)===props.data.start.substring(3,5) || last;\r\n\t\t\t\t\t\t\t\t\t\t\treturn(\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableRow key={index} className=\"timetable-time\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell className=\"timetable-time-string\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Grid>{ bool? t:undefined }</Grid>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tlast? // 마지막 셀은 출력 x\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tundefined:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tcellWidth.map((_, index2) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet clsName = \"table-body-team\";\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclsName += index2<cellNum?\" visible\":\" unvisible\";\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclsName += bool?\" midterm\":\" fullterm\";\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell key={\"\"+index+index2} id={\"rc/\"+index+\"/\"+index2} className={clsx(\"not-selected\",\"cell\"+index2, clsName)}></TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t}):undefined\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t</TableBody>\r\n\t\t\t\t\t\t\t</Table>\r\n\t\t\t\t\t\t</TableContainer>\r\n\t\t\t\t\t\t{nowCell<cellWidth.length-1?<ArrowForwardIosIcon onClick={nextCell} className=\"next-btn\"/>:undefined}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</>\r\n\t\t\t}\r\n\t\t</Grid>\r\n\t)\r\n}\r\n\r\nexport default TimeTable;","C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\components\\Commentitem.js",[],"C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\function\\getString.js",[],"C:\\Users\\USER\\Documents\\LetsMeet\\FrontEnd\\src\\function\\timeTableFunc.js",["133"],"// 해당 id의 node가 selected 상태인지를 return\r\nexport const getBool = (str) => {\r\n\tconst first_cell = document.getElementById(str);\r\n\tif(first_cell===null)\r\n\t\treturn null;\r\n\tif(first_cell.classList.contains(\"not-selected\")){\r\n\t\treturn false;\r\n\t}\r\n\treturn true;\r\n}\r\n\r\nconst setStartAhead = (start, end) => {\r\n\tlet s = [Number(start[0]), Number(start[1])];\r\n\tlet e = [Number(end[0]), Number(end[1])];\r\n\r\n\tif(s[0] > e[0]){\r\n\t\tlet tmp = s[0];\r\n\t\ts[0]= e[0];\r\n\t\te[0] = tmp;\r\n\t}\r\n\tif(s[1] > e[1]){\r\n\t\tlet tmp = s[1];\r\n\t\ts[1]= e[1];\r\n\t\te[1] = tmp;\r\n\t}\r\n\treturn [s, e];\r\n}\r\n\r\nlet max_row = 0;\r\nlet max_col = 0;\r\n\r\nexport const initializeStill = async (start) => {\r\n\t// still table 초기화\r\n\tconst [startStill, endStill] = await setStartAhead(start, [max_row, max_col]);\r\n\r\n\tfor(let i=startStill[0]; i<=endStill[0]; i++){\r\n\t\tfor(let j=startStill[1]; j<=endStill[1]; j++){\r\n\t\t\tconst className = \"stillrc\"+\"/\"+i+\"/\"+j;\r\n\t\t\tconst cell = document.getElementById(className);\r\n\t\t\tif(cell===null)\r\n\t\t\t\tcontinue;\r\n\t\t\tcell.classList.remove(\"selected\");\r\n\t\t\tcell.classList.remove(\"not-selected\");\r\n\t\t}\r\n\t}\r\n\tmax_row = 0; max_col = 0;\r\n}\r\n\r\n// start부터 end까지 drag 결과(bool) 표시하기\r\nexport const showDragResult = async (bool, type, start, end) => {\r\n\tconst [startPos, endPos] = await setStartAhead(start, end);\r\n\r\n\tif(end[0]>max_row)\r\n\t\tmax_row = end[0];\r\n\tif(end[1]>max_col)\r\n\t\tmax_col = end[1];\r\n\r\n\tlet table_type = \"stillrc\";\r\n\tif(type)\r\n\t\ttable_type = \"rc\";\r\n\r\n\tfor(let i=startPos[0]; i<=endPos[0]; i++){\r\n\t\tfor(let j=startPos[1]; j<=endPos[1]; j++){\r\n\t\t\tconst className = table_type+\"/\"+i+\"/\"+j;\r\n\t\t\tconst cell = document.getElementById(className);\r\n\t\t\tif(cell===null)\r\n\t\t\t\tcontinue;\r\n\t\t\tif(bool){ // 체크 해지해야함\r\n\t\t\t\tcell.classList.remove(\"selected\");\r\n\t\t\t\tcell.classList.add(\"not-selected\");\r\n\t\t\t}else{ // 체크해야함\r\n\t\t\t\tcell.classList.add(\"selected\");\r\n\t\t\t\tcell.classList.remove(\"not-selected\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// 원래 표랑 똑같게 만들기\r\nexport const makeOrignal = async (start, end) => {\r\n\tconst [startPos, endPos] = await setStartAhead(start, end);\r\n\r\n\tfor(let i=startPos[0]; i<=endPos[0]; i++){\r\n\t\tfor(let j=startPos[1]; j<=endPos[1]; j++){\r\n\t\t\tconst original = \"rc/\"+i+\"/\"+j;\r\n\t\t\tconst cell = document.getElementById(\"stillrc/\"+i+\"/\"+j);\r\n\r\n\t\t\tif(cell===null)\r\n\t\t\t\tcontinue;\r\n\t\t\tif(getBool(original)){ // original이랑 똑같이 바꾸기\r\n\t\t\t\tcell.classList.add(\"selected\");\r\n\t\t\t\tcell.classList.remove(\"not-selected\");\r\n\t\t\t}else{\r\n\t\t\t\tcell.classList.remove(\"selected\");\r\n\t\t\t\tcell.classList.add(\"not-selected\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// still 상태일 때 drag 처리\r\nexport const stillDragging = async (bool, start, prev, now) => {\r\n\t// prev보다 now의 좌표가 더 작으면 해당 부분 original로 돌리기\r\n\tconst distrow1 = prev[0]-start[0];\r\n\tconst distrow2 = now[0]-start[0];\r\n\tconst distcol1 = prev[1]-start[1];\r\n\tconst distcol2 = now[1]-start[1];\r\n\r\n\tif(Math.abs(distrow1)<=Math.abs(distrow2)) {\r\n\t\tawait showDragResult(bool, false, start, now); // stillrc 수정\r\n\t\tif(Math.abs(distcol1)>Math.abs(distcol2)){\r\n\t\t\t// 열이 더 작아졌으면\r\n\t\t\tif(distcol1<0)\r\n\t\t\t\tawait makeOrignal([Number(start[0]), Number(now[1])-1], prev);\r\n\t\t\telse\r\n\t\t\t\tawait makeOrignal([Number(start[0]), Number(now[1])+1], prev);\r\n\t\t}\r\n\t}else{ \r\n\t\t// 행이 더 작아졌으면\r\n\t\tif(distrow1<0)\r\n\t\t\tawait makeOrignal([Number(now[0])-1, Number(start[1])], prev);\r\n\t\telse\r\n\t\t\tawait makeOrignal([Number(now[0])+1, Number(start[1])], prev);\r\n\t\tif(Math.abs(distcol1)>Math.abs(distcol2)){\t// 둘다 작으면\r\n\t\t\tif(distrow1<0)\r\n\t\t\t\tawait makeOrignal(prev, [Number(now[0])-1, Number(now[1])-1]);\r\n\t\t\telse\r\n\t\t\t\tawait makeOrignal(prev, [Number(now[0])+1, Number(now[1])+1]);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport const calCheckArray = async (dragState, start, end, checkArray, len) => {\r\n\tlet CA = checkArray;\r\n\tconst [startPos, endPos] = await setStartAhead(start, end);\r\n\tfor(let i=startPos[0]; i<=endPos[0]; i++){\r\n\t\tfor(let j=startPos[1]; j<=endPos[1]; j++){\r\n\t\t\tif(dragState)\r\n\t\t\t\tCA[i] &= ~Math.pow(2, len-j-1);\r\n\t\t\telse\r\n\t\t\t\tCA[i] |= Math.pow(2, len-j-1);\r\n\t\t}\r\n\t}\r\n\treturn CA;\r\n}",{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","severity":1,"message":"139","line":13,"column":13,"nodeType":"140","endLine":13,"endColumn":63},{"ruleId":"141","severity":1,"message":"142","line":75,"column":20,"nodeType":"143","messageId":"144","endLine":75,"endColumn":22},{"ruleId":"138","severity":1,"message":"139","line":86,"column":13,"nodeType":"140","endLine":86,"endColumn":67},{"ruleId":"138","severity":1,"message":"139","line":95,"column":13,"nodeType":"140","endLine":95,"endColumn":72},{"ruleId":"145","severity":1,"message":"146","line":40,"column":53,"nodeType":"147","messageId":"148","endLine":40,"endColumn":64},{"ruleId":"149","severity":1,"message":"150","line":106,"column":19,"nodeType":"151","messageId":"152","endLine":106,"endColumn":30},{"ruleId":"138","severity":1,"message":"139","line":149,"column":10,"nodeType":"140","endLine":149,"endColumn":54},{"ruleId":"153","severity":1,"message":"154","line":17,"column":6,"nodeType":"155","endLine":17,"endColumn":8,"suggestions":"156"},{"ruleId":"157","severity":1,"message":"158","line":58,"column":7,"nodeType":"147","messageId":"159","endLine":58,"endColumn":17},{"ruleId":"145","severity":1,"message":"160","line":21,"column":10,"nodeType":"147","messageId":"148","endLine":21,"endColumn":17},{"ruleId":"145","severity":1,"message":"161","line":50,"column":15,"nodeType":"147","messageId":"148","endLine":50,"endColumn":22},{"ruleId":"145","severity":1,"message":"162","line":1,"column":17,"nodeType":"147","messageId":"148","endLine":1,"endColumn":26},{"ruleId":"153","severity":1,"message":"163","line":50,"column":10,"nodeType":"155","endLine":50,"endColumn":12,"suggestions":"164"},{"ruleId":"145","severity":1,"message":"162","line":1,"column":26,"nodeType":"147","messageId":"148","endLine":1,"endColumn":35},{"ruleId":"145","severity":1,"message":"165","line":3,"column":8,"nodeType":"147","messageId":"148","endLine":3,"endColumn":13},{"ruleId":"145","severity":1,"message":"166","line":20,"column":22,"nodeType":"147","messageId":"148","endLine":20,"endColumn":33},{"ruleId":"145","severity":1,"message":"167","line":5,"column":8,"nodeType":"147","messageId":"148","endLine":5,"endColumn":23},{"ruleId":"138","severity":1,"message":"139","line":70,"column":5,"nodeType":"140","endLine":70,"endColumn":50},{"ruleId":"145","severity":1,"message":"168","line":3,"column":9,"nodeType":"147","messageId":"148","endLine":3,"endColumn":13},{"ruleId":"153","severity":1,"message":"169","line":41,"column":5,"nodeType":"155","endLine":41,"endColumn":18,"suggestions":"170"},{"ruleId":"171","severity":1,"message":"172","line":38,"column":31,"nodeType":"143","messageId":"173","endLine":38,"endColumn":32},"no-native-reassign",["174"],"no-negated-in-lhs",["175"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'endGetMonth' is assigned a value but never used.","Identifier","unusedVar","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'mapScript'. Either include it or remove the dependency array.","ArrayExpression",["176"],"no-redeclare","'infowindow' is already defined.","redeclared","'address' is assigned a value but never used.","'addList' is assigned a value but never used.","'useEffect' is defined but never used.","React Hook useEffect has missing dependencies: 'data', 'match.url', 'yookha.how', 'yookha.what', 'yookha.when', 'yookha.where', 'yookha.who', and 'yookha.why'. Either include them or remove the dependency array.",["177"],"'axios' is defined but never used.","'settimedata' is assigned a value but never used.","'ArrowUpwardIcon' is defined but never used.","'Link' is defined but never used.","React Hook useEffect has a missing dependency: 'props.data.dates.length'. Either include it or remove the dependency array.",["178"],"no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","no-global-assign","no-unsafe-negation",{"desc":"179","fix":"180"},{"desc":"181","fix":"182"},{"desc":"183","fix":"184"},"Update the dependencies array to be: [mapScript]",{"range":"185","text":"186"},"Update the dependencies array to be: [data, match.url, yookha.how, yookha.what, yookha.when, yookha.where, yookha.who, yookha.why]",{"range":"187","text":"188"},"Update the dependencies array to be: [props.data.dates.length, props.dates]",{"range":"189","text":"190"},[469,471],"[mapScript]",[1552,1554],"[data, match.url, yookha.how, yookha.what, yookha.when, yookha.where, yookha.who, yookha.why]",[1438,1451],"[props.data.dates.length, props.dates]"]